import cvxpy as cp
import numpy as np
import numpy.random as npr
import scipy.sparse as sp
import torch
import scipy
import cvxpylayers
from cvxpylayers.torch.cvxpylayer import CvxpyLayer
import matplotlib.pyplot as plt
from sympy import MatrixSymbol, Matrix
from sympy import *
from numpy import linalg as LA
import matplotlib.patches as mpatches
from handelman_utils import *
# print(cp.__version__, np.__version__, scipy.__version__, cvxpylayers.__version__, torch.__version__)
# assert False
SVG_patch = mpatches.Patch(color='#ff7f0e', label='SVG w/ CMDP')
Ours_patch = mpatches.Patch(color='#2ca02c', label='Ours')

EPR = []
class PJ:
	deltaT = 0.1
	max_iteration = 100

	def __init__(self, x0=None, x1=None):
		if x0 is None or x1 is None:
			x0 = np.random.uniform(low=1, high=2, size=1)[0]
			x1 = np.random.uniform(low=-0.5, high=0.5, size=1)[0]
			while (x0 - 1.5)**2 + x1**2 - 0.25 > 0:
				x0 = np.random.uniform(low=1, high=2, size=1)[0]
				x1 = np.random.uniform(low=-0.5, high=0.5, size=1)[0]

			self.x0 = x0
			self.x1 = x1
		else:
			self.x0 = x0
			self.x1 = x1
		
		self.t = 0
		self.state = np.array([self.x0, self.x1])

	def reset(self, x0=None, x1=None):
		if x0 is None or x1 is None:
			x0 = np.random.uniform(low=1, high=2, size=1)[0]
			x1 = np.random.uniform(low=-0.5, high=0.5, size=1)[0]
			while (x0 - 1.5)**2 + x1**2 - 0.25 > 0:
				x0 = np.random.uniform(low=1, high=2, size=1)[0]
				x1 = np.random.uniform(low=-0.5, high=0.5, size=1)[0]
			
			self.x0 = x0
			self.x1 = x1
		else:
			self.x0 = x0
			self.x1 = x1
		
		self.t = 0
		self.state = np.array([self.x0, self.x1])
		return self.state

	def step(self, action):
		u = action 
		x0_tmp = self.state[0] + self.state[1]*self.deltaT
		x1_tmp = self.state[1] + self.deltaT*(u + self.state[0]**3 /3 )
		self.t = self.t + 1
		self.state = np.array([x0_tmp, x1_tmp])
		reward = self.design_reward()
		done = self.t == self.max_iteration
		return self.state, reward, done

	@property
	def distance(self, goal=np.array([0, 0])):
		dis = (np.sqrt((self.state[0] - goal[0])**2 + (self.state[1] - goal[1])**2)) 
		return dis

	@property
	def unsafedis(self, goal=np.array([-0.8, -1])):
		dis = (np.sqrt((self.state[0] - goal[0])**2 + (self.state[1] - goal[1])**2)) 
		return dis		

	def design_reward(self):
		r = 0
		r -= self.distance
		r += 0.2*self.unsafedis
		return r



def senGradLP(control_param, l, f, g):
	objc = cp.Variable(pos=True)
	# print("error 1")
	B = cp.Variable((1, 15)) #Barrier parameters for SOS rings
	t = cp.Parameter((1, 2)) #controller parameters
	# print("error 2")
	lambda_1 = cp.Variable((1, 5))
	lambda_2 = cp.Variable((1, 209)) #Q1
	lambda_3 = cp.Variable((1, 5)) #Q2
	objective = cp.Minimize(objc)
	constraints = []

	# print("error 3")	
	constraints += [lambda_1 >= 0]
	constraints += [lambda_2 >= 0]
	constraints += [lambda_3 >= 0]
	constraints += [objc >= 0]

	#-------------------The Initial Set Conditions-------------------
	constraints += [-8.0*lambda_1[0, 0] + 9.0*lambda_1[0, 1] + 64.0*lambda_1[0, 2] + 81.0*lambda_1[0, 3] - 72.0*lambda_1[0, 4] <= B[0, 0]+ objc]
	constraints += [-8.0*lambda_1[0, 0] + 9.0*lambda_1[0, 1] + 64.0*lambda_1[0, 2] + 81.0*lambda_1[0, 3] - 72.0*lambda_1[0, 4] >= B[0, 0]- objc]
	constraints += [-4*lambda_1[0, 0] + 4*lambda_1[0, 1] + 64.0*lambda_1[0, 2] + 72.0*lambda_1[0, 3] - 68.0*lambda_1[0, 4] <= B[0, 3]+ objc]
	constraints += [-4*lambda_1[0, 0] + 4*lambda_1[0, 1] + 64.0*lambda_1[0, 2] + 72.0*lambda_1[0, 3] - 68.0*lambda_1[0, 4] >= B[0, 3]- objc]
	constraints += [16.0*lambda_1[0, 2] + 16.0*lambda_1[0, 3] - 16*lambda_1[0, 4] <= B[0, 7]+ objc]
	constraints += [16.0*lambda_1[0, 2] + 16.0*lambda_1[0, 3] - 16*lambda_1[0, 4] >= B[0, 7]- objc]
	constraints += [12.0*lambda_1[0, 0] - 12.0*lambda_1[0, 1] - 192.0*lambda_1[0, 2] - 216.0*lambda_1[0, 3] + 204.0*lambda_1[0, 4] <= B[0, 2]+ objc]
	constraints += [12.0*lambda_1[0, 0] - 12.0*lambda_1[0, 1] - 192.0*lambda_1[0, 2] - 216.0*lambda_1[0, 3] + 204.0*lambda_1[0, 4] >= B[0, 2]- objc]
	constraints += [-96.0*lambda_1[0, 2] - 96.0*lambda_1[0, 3] + 96.0*lambda_1[0, 4] <= B[0, 10]+ objc]
	constraints += [-96.0*lambda_1[0, 2] - 96.0*lambda_1[0, 3] + 96.0*lambda_1[0, 4] >= B[0, 10]- objc]
	constraints += [-4.0*lambda_1[0, 0] + 4.0*lambda_1[0, 1] + 208.0*lambda_1[0, 2] + 216.0*lambda_1[0, 3] - 212.0*lambda_1[0, 4] <= B[0, 4]+ objc]
	constraints += [-4.0*lambda_1[0, 0] + 4.0*lambda_1[0, 1] + 208.0*lambda_1[0, 2] + 216.0*lambda_1[0, 3] - 212.0*lambda_1[0, 4] >= B[0, 4]- objc]
	constraints += [32.0*lambda_1[0, 2] + 32.0*lambda_1[0, 3] - 32.0*lambda_1[0, 4] <= B[0, 14]+ objc]
	constraints += [32.0*lambda_1[0, 2] + 32.0*lambda_1[0, 3] - 32.0*lambda_1[0, 4] >= B[0, 14]- objc]
	constraints += [-96.0*lambda_1[0, 2] - 96.0*lambda_1[0, 3] + 96.0*lambda_1[0, 4] <= B[0, 6]+ objc]
	constraints += [-96.0*lambda_1[0, 2] - 96.0*lambda_1[0, 3] + 96.0*lambda_1[0, 4] >= B[0, 6]- objc]
	constraints += [16.0*lambda_1[0, 2] + 16.0*lambda_1[0, 3] - 16.0*lambda_1[0, 4] <= B[0, 8]+ objc]
	constraints += [16.0*lambda_1[0, 2] + 16.0*lambda_1[0, 3] - 16.0*lambda_1[0, 4] >= B[0, 8]- objc]

	#------------------The Lie Derivative conditions------------------
	constraints += [-100*lambda_2[0, 0] - 100*lambda_2[0, 1] + 100*lambda_2[0, 2] + 100*lambda_2[0, 3] + 10000*lambda_2[0, 4] + 10000*lambda_2[0, 5] + 10000*lambda_2[0, 6] + 10000*lambda_2[0, 7] - 1000000*lambda_2[0, 8] - 1000000*lambda_2[0, 9] + 1000000*lambda_2[0, 10] + 1000000*lambda_2[0, 11] + 100000000*lambda_2[0, 12] + 100000000*lambda_2[0, 13] + 100000000*lambda_2[0, 14] + 100000000*lambda_2[0, 15] - 10000000000*lambda_2[0, 16] - 10000000000*lambda_2[0, 17] + 10000000000*lambda_2[0, 18] + 10000000000*lambda_2[0, 19] + 1000000000000*lambda_2[0, 20] + 1000000000000*lambda_2[0, 21] + 1000000000000*lambda_2[0, 22] + 1000000000000*lambda_2[0, 23] + 10000*lambda_2[0, 24] - 10000*lambda_2[0, 25] - 10000*lambda_2[0, 26] - 10000*lambda_2[0, 27] - 10000*lambda_2[0, 28] + 10000*lambda_2[0, 29] - 1000000*lambda_2[0, 30] - 1000000*lambda_2[0, 31] + 1000000*lambda_2[0, 32] + 1000000*lambda_2[0, 33] - 1000000*lambda_2[0, 34] - 1000000*lambda_2[0, 35] + 1000000*lambda_2[0, 36] + 1000000*lambda_2[0, 37] + 1000000*lambda_2[0, 38] - 1000000*lambda_2[0, 39] - 1000000*lambda_2[0, 40] + 1000000*lambda_2[0, 41] + 100000000*lambda_2[0, 42] + 100000000*lambda_2[0, 43] - 100000000*lambda_2[0, 44] - 100000000*lambda_2[0, 45] - 100000000*lambda_2[0, 46] - 100000000*lambda_2[0, 47] - 100000000*lambda_2[0, 48] - 100000000*lambda_2[0, 49] + 100000000*lambda_2[0, 50] - 100000000*lambda_2[0, 51] - 100000000*lambda_2[0, 52] + 100000000*lambda_2[0, 53] - 10000000000*lambda_2[0, 54] - 10000000000*lambda_2[0, 55] + 10000000000*lambda_2[0, 56] + 10000000000*lambda_2[0, 57] - 10000000000*lambda_2[0, 58] - 10000000000*lambda_2[0, 59] + 10000000000*lambda_2[0, 60] + 10000000000*lambda_2[0, 61] + 10000000000*lambda_2[0, 62] - 10000000000*lambda_2[0, 63] - 10000000000*lambda_2[0, 64] + 10000000000*lambda_2[0, 65] + 1000000000000*lambda_2[0, 66] + 1000000000000*lambda_2[0, 67] - 1000000000000*lambda_2[0, 68] - 1000000000000*lambda_2[0, 69] - 1000000000000*lambda_2[0, 70] - 1000000000000*lambda_2[0, 71] - 1000000000000*lambda_2[0, 72] - 1000000000000*lambda_2[0, 73] + 1000000000000*lambda_2[0, 74] - 1000000000000*lambda_2[0, 75] - 1000000000000*lambda_2[0, 76] + 1000000000000*lambda_2[0, 77] + 100000000*lambda_2[0, 78] + 100000000*lambda_2[0, 79] + 100000000*lambda_2[0, 80] + 100000000*lambda_2[0, 81] + 100000000*lambda_2[0, 82] + 100000000*lambda_2[0, 83] - 10000000000*lambda_2[0, 84] - 10000000000*lambda_2[0, 85] - 10000000000*lambda_2[0, 86] - 10000000000*lambda_2[0, 87] + 10000000000*lambda_2[0, 88] + 10000000000*lambda_2[0, 89] - 10000000000*lambda_2[0, 90] - 10000000000*lambda_2[0, 91] + 10000000000*lambda_2[0, 92] + 10000000000*lambda_2[0, 93] + 10000000000*lambda_2[0, 94] + 10000000000*lambda_2[0, 95] + 1000000000000*lambda_2[0, 96] + 1000000000000*lambda_2[0, 97] + 1000000000000*lambda_2[0, 98] + 1000000000000*lambda_2[0, 99] + 1000000000000*lambda_2[0, 100] + 1000000000000*lambda_2[0, 101] + 1000000000000*lambda_2[0, 102] + 1000000000000*lambda_2[0, 103] + 1000000000000*lambda_2[0, 104] + 1000000000000*lambda_2[0, 105] + 1000000000000*lambda_2[0, 106] + 1000000000000*lambda_2[0, 107] + 1000000000000*lambda_2[0, 108] - 1000000000000*lambda_2[0, 109] - 1000000000000*lambda_2[0, 110] - 1000000000000*lambda_2[0, 111] - 1000000000000*lambda_2[0, 112] + 1000000000000*lambda_2[0, 113] + 1000000*lambda_2[0, 114] + 1000000*lambda_2[0, 115] - 1000000*lambda_2[0, 116] - 1000000*lambda_2[0, 117] - 100000000*lambda_2[0, 118] - 100000000*lambda_2[0, 119] + 100000000*lambda_2[0, 120] - 100000000*lambda_2[0, 121] - 100000000*lambda_2[0, 122] + 100000000*lambda_2[0, 123] + 100000000*lambda_2[0, 124] - 100000000*lambda_2[0, 125] - 100000000*lambda_2[0, 126] + 100000000*lambda_2[0, 127] - 100000000*lambda_2[0, 128] - 100000000*lambda_2[0, 129] + 10000000000*lambda_2[0, 130] + 10000000000*lambda_2[0, 131] + 10000000000*lambda_2[0, 132] + 10000000000*lambda_2[0, 133] + 10000000000*lambda_2[0, 134] - 10000000000*lambda_2[0, 135] - 10000000000*lambda_2[0, 136] - 10000000000*lambda_2[0, 137] - 10000000000*lambda_2[0, 138] + 10000000000*lambda_2[0, 139] - 10000000000*lambda_2[0, 140] - 10000000000*lambda_2[0, 141] - 1000000000000*lambda_2[0, 142] - 1000000000000*lambda_2[0, 143] + 1000000000000*lambda_2[0, 144] - 1000000000000*lambda_2[0, 145] - 1000000000000*lambda_2[0, 146] + 1000000000000*lambda_2[0, 147] + 1000000000000*lambda_2[0, 148] - 1000000000000*lambda_2[0, 149] - 1000000000000*lambda_2[0, 150] + 1000000000000*lambda_2[0, 151] - 1000000000000*lambda_2[0, 152] - 1000000000000*lambda_2[0, 153] + 10000000000*lambda_2[0, 154] - 10000000000*lambda_2[0, 155] - 10000000000*lambda_2[0, 156] + 10000000000*lambda_2[0, 157] + 10000000000*lambda_2[0, 158] + 10000000000*lambda_2[0, 159] - 10000000000*lambda_2[0, 160] - 10000000000*lambda_2[0, 161] + 10000000000*lambda_2[0, 162] + 10000000000*lambda_2[0, 163] - 10000000000*lambda_2[0, 164] - 10000000000*lambda_2[0, 165] - 1000000000000*lambda_2[0, 166] - 1000000000000*lambda_2[0, 167] + 1000000000000*lambda_2[0, 168] + 1000000000000*lambda_2[0, 169] - 1000000000000*lambda_2[0, 170] - 1000000000000*lambda_2[0, 171] - 1000000000000*lambda_2[0, 172] - 1000000000000*lambda_2[0, 173] - 1000000000000*lambda_2[0, 174] - 1000000000000*lambda_2[0, 175] + 1000000000000*lambda_2[0, 176] + 1000000000000*lambda_2[0, 177] + 1000000000000*lambda_2[0, 178] + 1000000000000*lambda_2[0, 179] - 1000000000000*lambda_2[0, 180] - 1000000000000*lambda_2[0, 181] - 1000000000000*lambda_2[0, 182] - 1000000000000*lambda_2[0, 183] - 1000000000000*lambda_2[0, 184] - 1000000000000*lambda_2[0, 185] + 1000000000000*lambda_2[0, 186] + 1000000000000*lambda_2[0, 187] - 1000000000000*lambda_2[0, 188] - 1000000000000*lambda_2[0, 189] + 1000000000000*lambda_2[0, 190] + 1000000000000*lambda_2[0, 191] + 1000000000000*lambda_2[0, 192] + 1000000000000*lambda_2[0, 193] + 100000000*lambda_2[0, 194] - 10000000000*lambda_2[0, 195] - 10000000000*lambda_2[0, 196] + 10000000000*lambda_2[0, 197] + 10000000000*lambda_2[0, 198] + 1000000000000*lambda_2[0, 199] + 1000000000000*lambda_2[0, 200] + 1000000000000*lambda_2[0, 201] + 1000000000000*lambda_2[0, 202] + 1000000000000*lambda_2[0, 203] - 1000000000000*lambda_2[0, 204] - 1000000000000*lambda_2[0, 205] - 1000000000000*lambda_2[0, 206] - 1000000000000*lambda_2[0, 207] + 1000000000000*lambda_2[0, 208] <= -l*B[0, 0]+ objc]
	constraints += [-100*lambda_2[0, 0] - 100*lambda_2[0, 1] + 100*lambda_2[0, 2] + 100*lambda_2[0, 3] + 10000*lambda_2[0, 4] + 10000*lambda_2[0, 5] + 10000*lambda_2[0, 6] + 10000*lambda_2[0, 7] - 1000000*lambda_2[0, 8] - 1000000*lambda_2[0, 9] + 1000000*lambda_2[0, 10] + 1000000*lambda_2[0, 11] + 100000000*lambda_2[0, 12] + 100000000*lambda_2[0, 13] + 100000000*lambda_2[0, 14] + 100000000*lambda_2[0, 15] - 10000000000*lambda_2[0, 16] - 10000000000*lambda_2[0, 17] + 10000000000*lambda_2[0, 18] + 10000000000*lambda_2[0, 19] + 1000000000000*lambda_2[0, 20] + 1000000000000*lambda_2[0, 21] + 1000000000000*lambda_2[0, 22] + 1000000000000*lambda_2[0, 23] + 10000*lambda_2[0, 24] - 10000*lambda_2[0, 25] - 10000*lambda_2[0, 26] - 10000*lambda_2[0, 27] - 10000*lambda_2[0, 28] + 10000*lambda_2[0, 29] - 1000000*lambda_2[0, 30] - 1000000*lambda_2[0, 31] + 1000000*lambda_2[0, 32] + 1000000*lambda_2[0, 33] - 1000000*lambda_2[0, 34] - 1000000*lambda_2[0, 35] + 1000000*lambda_2[0, 36] + 1000000*lambda_2[0, 37] + 1000000*lambda_2[0, 38] - 1000000*lambda_2[0, 39] - 1000000*lambda_2[0, 40] + 1000000*lambda_2[0, 41] + 100000000*lambda_2[0, 42] + 100000000*lambda_2[0, 43] - 100000000*lambda_2[0, 44] - 100000000*lambda_2[0, 45] - 100000000*lambda_2[0, 46] - 100000000*lambda_2[0, 47] - 100000000*lambda_2[0, 48] - 100000000*lambda_2[0, 49] + 100000000*lambda_2[0, 50] - 100000000*lambda_2[0, 51] - 100000000*lambda_2[0, 52] + 100000000*lambda_2[0, 53] - 10000000000*lambda_2[0, 54] - 10000000000*lambda_2[0, 55] + 10000000000*lambda_2[0, 56] + 10000000000*lambda_2[0, 57] - 10000000000*lambda_2[0, 58] - 10000000000*lambda_2[0, 59] + 10000000000*lambda_2[0, 60] + 10000000000*lambda_2[0, 61] + 10000000000*lambda_2[0, 62] - 10000000000*lambda_2[0, 63] - 10000000000*lambda_2[0, 64] + 10000000000*lambda_2[0, 65] + 1000000000000*lambda_2[0, 66] + 1000000000000*lambda_2[0, 67] - 1000000000000*lambda_2[0, 68] - 1000000000000*lambda_2[0, 69] - 1000000000000*lambda_2[0, 70] - 1000000000000*lambda_2[0, 71] - 1000000000000*lambda_2[0, 72] - 1000000000000*lambda_2[0, 73] + 1000000000000*lambda_2[0, 74] - 1000000000000*lambda_2[0, 75] - 1000000000000*lambda_2[0, 76] + 1000000000000*lambda_2[0, 77] + 100000000*lambda_2[0, 78] + 100000000*lambda_2[0, 79] + 100000000*lambda_2[0, 80] + 100000000*lambda_2[0, 81] + 100000000*lambda_2[0, 82] + 100000000*lambda_2[0, 83] - 10000000000*lambda_2[0, 84] - 10000000000*lambda_2[0, 85] - 10000000000*lambda_2[0, 86] - 10000000000*lambda_2[0, 87] + 10000000000*lambda_2[0, 88] + 10000000000*lambda_2[0, 89] - 10000000000*lambda_2[0, 90] - 10000000000*lambda_2[0, 91] + 10000000000*lambda_2[0, 92] + 10000000000*lambda_2[0, 93] + 10000000000*lambda_2[0, 94] + 10000000000*lambda_2[0, 95] + 1000000000000*lambda_2[0, 96] + 1000000000000*lambda_2[0, 97] + 1000000000000*lambda_2[0, 98] + 1000000000000*lambda_2[0, 99] + 1000000000000*lambda_2[0, 100] + 1000000000000*lambda_2[0, 101] + 1000000000000*lambda_2[0, 102] + 1000000000000*lambda_2[0, 103] + 1000000000000*lambda_2[0, 104] + 1000000000000*lambda_2[0, 105] + 1000000000000*lambda_2[0, 106] + 1000000000000*lambda_2[0, 107] + 1000000000000*lambda_2[0, 108] - 1000000000000*lambda_2[0, 109] - 1000000000000*lambda_2[0, 110] - 1000000000000*lambda_2[0, 111] - 1000000000000*lambda_2[0, 112] + 1000000000000*lambda_2[0, 113] + 1000000*lambda_2[0, 114] + 1000000*lambda_2[0, 115] - 1000000*lambda_2[0, 116] - 1000000*lambda_2[0, 117] - 100000000*lambda_2[0, 118] - 100000000*lambda_2[0, 119] + 100000000*lambda_2[0, 120] - 100000000*lambda_2[0, 121] - 100000000*lambda_2[0, 122] + 100000000*lambda_2[0, 123] + 100000000*lambda_2[0, 124] - 100000000*lambda_2[0, 125] - 100000000*lambda_2[0, 126] + 100000000*lambda_2[0, 127] - 100000000*lambda_2[0, 128] - 100000000*lambda_2[0, 129] + 10000000000*lambda_2[0, 130] + 10000000000*lambda_2[0, 131] + 10000000000*lambda_2[0, 132] + 10000000000*lambda_2[0, 133] + 10000000000*lambda_2[0, 134] - 10000000000*lambda_2[0, 135] - 10000000000*lambda_2[0, 136] - 10000000000*lambda_2[0, 137] - 10000000000*lambda_2[0, 138] + 10000000000*lambda_2[0, 139] - 10000000000*lambda_2[0, 140] - 10000000000*lambda_2[0, 141] - 1000000000000*lambda_2[0, 142] - 1000000000000*lambda_2[0, 143] + 1000000000000*lambda_2[0, 144] - 1000000000000*lambda_2[0, 145] - 1000000000000*lambda_2[0, 146] + 1000000000000*lambda_2[0, 147] + 1000000000000*lambda_2[0, 148] - 1000000000000*lambda_2[0, 149] - 1000000000000*lambda_2[0, 150] + 1000000000000*lambda_2[0, 151] - 1000000000000*lambda_2[0, 152] - 1000000000000*lambda_2[0, 153] + 10000000000*lambda_2[0, 154] - 10000000000*lambda_2[0, 155] - 10000000000*lambda_2[0, 156] + 10000000000*lambda_2[0, 157] + 10000000000*lambda_2[0, 158] + 10000000000*lambda_2[0, 159] - 10000000000*lambda_2[0, 160] - 10000000000*lambda_2[0, 161] + 10000000000*lambda_2[0, 162] + 10000000000*lambda_2[0, 163] - 10000000000*lambda_2[0, 164] - 10000000000*lambda_2[0, 165] - 1000000000000*lambda_2[0, 166] - 1000000000000*lambda_2[0, 167] + 1000000000000*lambda_2[0, 168] + 1000000000000*lambda_2[0, 169] - 1000000000000*lambda_2[0, 170] - 1000000000000*lambda_2[0, 171] - 1000000000000*lambda_2[0, 172] - 1000000000000*lambda_2[0, 173] - 1000000000000*lambda_2[0, 174] - 1000000000000*lambda_2[0, 175] + 1000000000000*lambda_2[0, 176] + 1000000000000*lambda_2[0, 177] + 1000000000000*lambda_2[0, 178] + 1000000000000*lambda_2[0, 179] - 1000000000000*lambda_2[0, 180] - 1000000000000*lambda_2[0, 181] - 1000000000000*lambda_2[0, 182] - 1000000000000*lambda_2[0, 183] - 1000000000000*lambda_2[0, 184] - 1000000000000*lambda_2[0, 185] + 1000000000000*lambda_2[0, 186] + 1000000000000*lambda_2[0, 187] - 1000000000000*lambda_2[0, 188] - 1000000000000*lambda_2[0, 189] + 1000000000000*lambda_2[0, 190] + 1000000000000*lambda_2[0, 191] + 1000000000000*lambda_2[0, 192] + 1000000000000*lambda_2[0, 193] + 100000000*lambda_2[0, 194] - 10000000000*lambda_2[0, 195] - 10000000000*lambda_2[0, 196] + 10000000000*lambda_2[0, 197] + 10000000000*lambda_2[0, 198] + 1000000000000*lambda_2[0, 199] + 1000000000000*lambda_2[0, 200] + 1000000000000*lambda_2[0, 201] + 1000000000000*lambda_2[0, 202] + 1000000000000*lambda_2[0, 203] - 1000000000000*lambda_2[0, 204] - 1000000000000*lambda_2[0, 205] - 1000000000000*lambda_2[0, 206] - 1000000000000*lambda_2[0, 207] + 1000000000000*lambda_2[0, 208] >= -l*B[0, 0]- objc]
	constraints += [lambda_2[0, 0] - lambda_2[0, 2] - 200*lambda_2[0, 4] - 200*lambda_2[0, 6] + 30000*lambda_2[0, 8] - 30000*lambda_2[0, 10] - 4000000*lambda_2[0, 12] - 4000000*lambda_2[0, 14] + 500000000*lambda_2[0, 16] - 500000000*lambda_2[0, 18] - 60000000000*lambda_2[0, 20] - 60000000000*lambda_2[0, 22] - 100*lambda_2[0, 24] + 200*lambda_2[0, 25] + 100*lambda_2[0, 26] + 100*lambda_2[0, 27] - 100*lambda_2[0, 29] + 20000*lambda_2[0, 30] + 10000*lambda_2[0, 31] - 30000*lambda_2[0, 32] - 10000*lambda_2[0, 33] + 30000*lambda_2[0, 34] + 20000*lambda_2[0, 35] - 20000*lambda_2[0, 36] - 20000*lambda_2[0, 38] + 10000*lambda_2[0, 39] - 10000*lambda_2[0, 41] - 3000000*lambda_2[0, 42] - 1000000*lambda_2[0, 43] + 4000000*lambda_2[0, 44] + 1000000*lambda_2[0, 45] + 4000000*lambda_2[0, 46] + 3000000*lambda_2[0, 47] + 3000000*lambda_2[0, 48] - 3000000*lambda_2[0, 50] + 1000000*lambda_2[0, 51] - 1000000*lambda_2[0, 53] + 400000000*lambda_2[0, 54] + 100000000*lambda_2[0, 55] - 500000000*lambda_2[0, 56] - 100000000*lambda_2[0, 57] + 500000000*lambda_2[0, 58] + 400000000*lambda_2[0, 59] - 400000000*lambda_2[0, 60] - 400000000*lambda_2[0, 62] + 100000000*lambda_2[0, 63] - 100000000*lambda_2[0, 65] - 50000000000*lambda_2[0, 66] - 10000000000*lambda_2[0, 67] + 60000000000*lambda_2[0, 68] + 10000000000*lambda_2[0, 69] + 60000000000*lambda_2[0, 70] + 50000000000*lambda_2[0, 71] + 50000000000*lambda_2[0, 72] - 50000000000*lambda_2[0, 74] + 10000000000*lambda_2[0, 75] - 10000000000*lambda_2[0, 77] - 2000000*lambda_2[0, 78] - 4000000*lambda_2[0, 79] - 2000000*lambda_2[0, 80] - 2000000*lambda_2[0, 81] - 2000000*lambda_2[0, 83] + 300000000*lambda_2[0, 84] + 200000000*lambda_2[0, 85] + 500000000*lambda_2[0, 86] + 200000000*lambda_2[0, 87] - 500000000*lambda_2[0, 88] - 300000000*lambda_2[0, 89] + 300000000*lambda_2[0, 90] - 300000000*lambda_2[0, 92] - 200000000*lambda_2[0, 93] - 200000000*lambda_2[0, 95] - 40000000000*lambda_2[0, 96] - 20000000000*lambda_2[0, 97] - 60000000000*lambda_2[0, 98] - 20000000000*lambda_2[0, 99] - 60000000000*lambda_2[0, 100] - 40000000000*lambda_2[0, 101] - 40000000000*lambda_2[0, 102] - 40000000000*lambda_2[0, 104] - 20000000000*lambda_2[0, 105] - 20000000000*lambda_2[0, 107] - 30000000000*lambda_2[0, 108] + 60000000000*lambda_2[0, 109] + 30000000000*lambda_2[0, 110] + 30000000000*lambda_2[0, 111] - 30000000000*lambda_2[0, 113] - 20000*lambda_2[0, 114] - 10000*lambda_2[0, 115] + 20000*lambda_2[0, 116] + 10000*lambda_2[0, 117] + 3000000*lambda_2[0, 118] + 2000000*lambda_2[0, 119] - 3000000*lambda_2[0, 120] + 2000000*lambda_2[0, 121] + 1000000*lambda_2[0, 122] - 3000000*lambda_2[0, 123] - 1000000*lambda_2[0, 124] + 3000000*lambda_2[0, 125] + 2000000*lambda_2[0, 126] - 1000000*lambda_2[0, 127] + 2000000*lambda_2[0, 128] + 1000000*lambda_2[0, 129] - 400000000*lambda_2[0, 130] - 200000000*lambda_2[0, 131] - 400000000*lambda_2[0, 132] - 300000000*lambda_2[0, 133] - 100000000*lambda_2[0, 134] + 400000000*lambda_2[0, 135] + 100000000*lambda_2[0, 136] + 400000000*lambda_2[0, 137] + 300000000*lambda_2[0, 138] - 100000000*lambda_2[0, 139] + 200000000*lambda_2[0, 140] + 100000000*lambda_2[0, 141] + 50000000000*lambda_2[0, 142] + 20000000000*lambda_2[0, 143] - 50000000000*lambda_2[0, 144] + 40000000000*lambda_2[0, 145] + 10000000000*lambda_2[0, 146] - 50000000000*lambda_2[0, 147] - 10000000000*lambda_2[0, 148] + 50000000000*lambda_2[0, 149] + 40000000000*lambda_2[0, 150] - 10000000000*lambda_2[0, 151] + 20000000000*lambda_2[0, 152] + 10000000000*lambda_2[0, 153] - 300000000*lambda_2[0, 154] + 400000000*lambda_2[0, 155] + 300000000*lambda_2[0, 156] - 200000000*lambda_2[0, 157] - 400000000*lambda_2[0, 158] - 200000000*lambda_2[0, 159] + 200000000*lambda_2[0, 160] + 100000000*lambda_2[0, 161] - 300000000*lambda_2[0, 162] - 100000000*lambda_2[0, 163] + 300000000*lambda_2[0, 164] + 200000000*lambda_2[0, 165] + 40000000000*lambda_2[0, 166] + 30000000000*lambda_2[0, 167] - 50000000000*lambda_2[0, 168] - 30000000000*lambda_2[0, 169] + 50000000000*lambda_2[0, 170] + 40000000000*lambda_2[0, 171] + 30000000000*lambda_2[0, 172] + 20000000000*lambda_2[0, 173] + 50000000000*lambda_2[0, 174] + 20000000000*lambda_2[0, 175] - 50000000000*lambda_2[0, 176] - 30000000000*lambda_2[0, 177] - 30000000000*lambda_2[0, 178] - 10000000000*lambda_2[0, 179] + 40000000000*lambda_2[0, 180] + 10000000000*lambda_2[0, 181] + 40000000000*lambda_2[0, 182] + 30000000000*lambda_2[0, 183] + 20000000000*lambda_2[0, 184] + 10000000000*lambda_2[0, 185] - 30000000000*lambda_2[0, 186] - 10000000000*lambda_2[0, 187] + 30000000000*lambda_2[0, 188] + 20000000000*lambda_2[0, 189] - 40000000000*lambda_2[0, 190] - 20000000000*lambda_2[0, 191] - 40000000000*lambda_2[0, 192] - 20000000000*lambda_2[0, 193] - 2000000*lambda_2[0, 194] + 300000000*lambda_2[0, 195] + 200000000*lambda_2[0, 196] - 300000000*lambda_2[0, 197] - 200000000*lambda_2[0, 198] - 40000000000*lambda_2[0, 199] - 20000000000*lambda_2[0, 200] - 40000000000*lambda_2[0, 201] - 20000000000*lambda_2[0, 202] - 30000000000*lambda_2[0, 203] + 40000000000*lambda_2[0, 204] + 30000000000*lambda_2[0, 205] + 30000000000*lambda_2[0, 206] + 20000000000*lambda_2[0, 207] - 30000000000*lambda_2[0, 208] <= f*B[0, 2] - l*B[0, 1] + B[0, 1]*t[0, 1]+ objc]
	constraints += [lambda_2[0, 0] - lambda_2[0, 2] - 200*lambda_2[0, 4] - 200*lambda_2[0, 6] + 30000*lambda_2[0, 8] - 30000*lambda_2[0, 10] - 4000000*lambda_2[0, 12] - 4000000*lambda_2[0, 14] + 500000000*lambda_2[0, 16] - 500000000*lambda_2[0, 18] - 60000000000*lambda_2[0, 20] - 60000000000*lambda_2[0, 22] - 100*lambda_2[0, 24] + 200*lambda_2[0, 25] + 100*lambda_2[0, 26] + 100*lambda_2[0, 27] - 100*lambda_2[0, 29] + 20000*lambda_2[0, 30] + 10000*lambda_2[0, 31] - 30000*lambda_2[0, 32] - 10000*lambda_2[0, 33] + 30000*lambda_2[0, 34] + 20000*lambda_2[0, 35] - 20000*lambda_2[0, 36] - 20000*lambda_2[0, 38] + 10000*lambda_2[0, 39] - 10000*lambda_2[0, 41] - 3000000*lambda_2[0, 42] - 1000000*lambda_2[0, 43] + 4000000*lambda_2[0, 44] + 1000000*lambda_2[0, 45] + 4000000*lambda_2[0, 46] + 3000000*lambda_2[0, 47] + 3000000*lambda_2[0, 48] - 3000000*lambda_2[0, 50] + 1000000*lambda_2[0, 51] - 1000000*lambda_2[0, 53] + 400000000*lambda_2[0, 54] + 100000000*lambda_2[0, 55] - 500000000*lambda_2[0, 56] - 100000000*lambda_2[0, 57] + 500000000*lambda_2[0, 58] + 400000000*lambda_2[0, 59] - 400000000*lambda_2[0, 60] - 400000000*lambda_2[0, 62] + 100000000*lambda_2[0, 63] - 100000000*lambda_2[0, 65] - 50000000000*lambda_2[0, 66] - 10000000000*lambda_2[0, 67] + 60000000000*lambda_2[0, 68] + 10000000000*lambda_2[0, 69] + 60000000000*lambda_2[0, 70] + 50000000000*lambda_2[0, 71] + 50000000000*lambda_2[0, 72] - 50000000000*lambda_2[0, 74] + 10000000000*lambda_2[0, 75] - 10000000000*lambda_2[0, 77] - 2000000*lambda_2[0, 78] - 4000000*lambda_2[0, 79] - 2000000*lambda_2[0, 80] - 2000000*lambda_2[0, 81] - 2000000*lambda_2[0, 83] + 300000000*lambda_2[0, 84] + 200000000*lambda_2[0, 85] + 500000000*lambda_2[0, 86] + 200000000*lambda_2[0, 87] - 500000000*lambda_2[0, 88] - 300000000*lambda_2[0, 89] + 300000000*lambda_2[0, 90] - 300000000*lambda_2[0, 92] - 200000000*lambda_2[0, 93] - 200000000*lambda_2[0, 95] - 40000000000*lambda_2[0, 96] - 20000000000*lambda_2[0, 97] - 60000000000*lambda_2[0, 98] - 20000000000*lambda_2[0, 99] - 60000000000*lambda_2[0, 100] - 40000000000*lambda_2[0, 101] - 40000000000*lambda_2[0, 102] - 40000000000*lambda_2[0, 104] - 20000000000*lambda_2[0, 105] - 20000000000*lambda_2[0, 107] - 30000000000*lambda_2[0, 108] + 60000000000*lambda_2[0, 109] + 30000000000*lambda_2[0, 110] + 30000000000*lambda_2[0, 111] - 30000000000*lambda_2[0, 113] - 20000*lambda_2[0, 114] - 10000*lambda_2[0, 115] + 20000*lambda_2[0, 116] + 10000*lambda_2[0, 117] + 3000000*lambda_2[0, 118] + 2000000*lambda_2[0, 119] - 3000000*lambda_2[0, 120] + 2000000*lambda_2[0, 121] + 1000000*lambda_2[0, 122] - 3000000*lambda_2[0, 123] - 1000000*lambda_2[0, 124] + 3000000*lambda_2[0, 125] + 2000000*lambda_2[0, 126] - 1000000*lambda_2[0, 127] + 2000000*lambda_2[0, 128] + 1000000*lambda_2[0, 129] - 400000000*lambda_2[0, 130] - 200000000*lambda_2[0, 131] - 400000000*lambda_2[0, 132] - 300000000*lambda_2[0, 133] - 100000000*lambda_2[0, 134] + 400000000*lambda_2[0, 135] + 100000000*lambda_2[0, 136] + 400000000*lambda_2[0, 137] + 300000000*lambda_2[0, 138] - 100000000*lambda_2[0, 139] + 200000000*lambda_2[0, 140] + 100000000*lambda_2[0, 141] + 50000000000*lambda_2[0, 142] + 20000000000*lambda_2[0, 143] - 50000000000*lambda_2[0, 144] + 40000000000*lambda_2[0, 145] + 10000000000*lambda_2[0, 146] - 50000000000*lambda_2[0, 147] - 10000000000*lambda_2[0, 148] + 50000000000*lambda_2[0, 149] + 40000000000*lambda_2[0, 150] - 10000000000*lambda_2[0, 151] + 20000000000*lambda_2[0, 152] + 10000000000*lambda_2[0, 153] - 300000000*lambda_2[0, 154] + 400000000*lambda_2[0, 155] + 300000000*lambda_2[0, 156] - 200000000*lambda_2[0, 157] - 400000000*lambda_2[0, 158] - 200000000*lambda_2[0, 159] + 200000000*lambda_2[0, 160] + 100000000*lambda_2[0, 161] - 300000000*lambda_2[0, 162] - 100000000*lambda_2[0, 163] + 300000000*lambda_2[0, 164] + 200000000*lambda_2[0, 165] + 40000000000*lambda_2[0, 166] + 30000000000*lambda_2[0, 167] - 50000000000*lambda_2[0, 168] - 30000000000*lambda_2[0, 169] + 50000000000*lambda_2[0, 170] + 40000000000*lambda_2[0, 171] + 30000000000*lambda_2[0, 172] + 20000000000*lambda_2[0, 173] + 50000000000*lambda_2[0, 174] + 20000000000*lambda_2[0, 175] - 50000000000*lambda_2[0, 176] - 30000000000*lambda_2[0, 177] - 30000000000*lambda_2[0, 178] - 10000000000*lambda_2[0, 179] + 40000000000*lambda_2[0, 180] + 10000000000*lambda_2[0, 181] + 40000000000*lambda_2[0, 182] + 30000000000*lambda_2[0, 183] + 20000000000*lambda_2[0, 184] + 10000000000*lambda_2[0, 185] - 30000000000*lambda_2[0, 186] - 10000000000*lambda_2[0, 187] + 30000000000*lambda_2[0, 188] + 20000000000*lambda_2[0, 189] - 40000000000*lambda_2[0, 190] - 20000000000*lambda_2[0, 191] - 40000000000*lambda_2[0, 192] - 20000000000*lambda_2[0, 193] - 2000000*lambda_2[0, 194] + 300000000*lambda_2[0, 195] + 200000000*lambda_2[0, 196] - 300000000*lambda_2[0, 197] - 200000000*lambda_2[0, 198] - 40000000000*lambda_2[0, 199] - 20000000000*lambda_2[0, 200] - 40000000000*lambda_2[0, 201] - 20000000000*lambda_2[0, 202] - 30000000000*lambda_2[0, 203] + 40000000000*lambda_2[0, 204] + 30000000000*lambda_2[0, 205] + 30000000000*lambda_2[0, 206] + 20000000000*lambda_2[0, 207] - 30000000000*lambda_2[0, 208] >= f*B[0, 2] - l*B[0, 1] + B[0, 1]*t[0, 1]- objc]
	constraints += [lambda_2[0, 4] + lambda_2[0, 6] - 300*lambda_2[0, 8] + 300*lambda_2[0, 10] + 60000*lambda_2[0, 12] + 60000*lambda_2[0, 14] - 10000000*lambda_2[0, 16] + 10000000*lambda_2[0, 18] + 1500000000*lambda_2[0, 20] + 1500000000*lambda_2[0, 22] - lambda_2[0, 25] - 100*lambda_2[0, 30] + 300*lambda_2[0, 32] - 300*lambda_2[0, 34] - 100*lambda_2[0, 35] + 100*lambda_2[0, 36] + 100*lambda_2[0, 38] + 30000*lambda_2[0, 42] - 60000*lambda_2[0, 44] - 60000*lambda_2[0, 46] - 30000*lambda_2[0, 47] - 30000*lambda_2[0, 48] + 30000*lambda_2[0, 50] - 6000000*lambda_2[0, 54] + 10000000*lambda_2[0, 56] - 10000000*lambda_2[0, 58] - 6000000*lambda_2[0, 59] + 6000000*lambda_2[0, 60] + 6000000*lambda_2[0, 62] + 1000000000*lambda_2[0, 66] - 1500000000*lambda_2[0, 68] - 1500000000*lambda_2[0, 70] - 1000000000*lambda_2[0, 71] - 1000000000*lambda_2[0, 72] + 1000000000*lambda_2[0, 74] + 10000*lambda_2[0, 78] + 60000*lambda_2[0, 79] + 10000*lambda_2[0, 80] + 10000*lambda_2[0, 81] + 10000*lambda_2[0, 83] - 3000000*lambda_2[0, 84] - 1000000*lambda_2[0, 85] - 10000000*lambda_2[0, 86] - 1000000*lambda_2[0, 87] + 10000000*lambda_2[0, 88] + 3000000*lambda_2[0, 89] - 3000000*lambda_2[0, 90] + 3000000*lambda_2[0, 92] + 1000000*lambda_2[0, 93] + 1000000*lambda_2[0, 95] + 600000000*lambda_2[0, 96] + 100000000*lambda_2[0, 97] + 1500000000*lambda_2[0, 98] + 100000000*lambda_2[0, 99] + 1500000000*lambda_2[0, 100] + 600000000*lambda_2[0, 101] + 600000000*lambda_2[0, 102] + 600000000*lambda_2[0, 104] + 100000000*lambda_2[0, 105] + 100000000*lambda_2[0, 107] + 300000000*lambda_2[0, 108] - 1500000000*lambda_2[0, 109] - 300000000*lambda_2[0, 110] - 300000000*lambda_2[0, 111] + 300000000*lambda_2[0, 113] + 100*lambda_2[0, 114] - 100*lambda_2[0, 116] - 30000*lambda_2[0, 118] - 10000*lambda_2[0, 119] + 30000*lambda_2[0, 120] - 10000*lambda_2[0, 121] + 30000*lambda_2[0, 123] - 30000*lambda_2[0, 125] - 10000*lambda_2[0, 126] - 10000*lambda_2[0, 128] + 6000000*lambda_2[0, 130] + 1000000*lambda_2[0, 131] + 6000000*lambda_2[0, 132] + 3000000*lambda_2[0, 133] - 6000000*lambda_2[0, 135] - 6000000*lambda_2[0, 137] - 3000000*lambda_2[0, 138] - 1000000*lambda_2[0, 140] - 1000000000*lambda_2[0, 142] - 100000000*lambda_2[0, 143] + 1000000000*lambda_2[0, 144] - 600000000*lambda_2[0, 145] + 1000000000*lambda_2[0, 147] - 1000000000*lambda_2[0, 149] - 600000000*lambda_2[0, 150] - 100000000*lambda_2[0, 152] + 3000000*lambda_2[0, 154] - 6000000*lambda_2[0, 155] - 3000000*lambda_2[0, 156] + 1000000*lambda_2[0, 157] + 6000000*lambda_2[0, 158] + 1000000*lambda_2[0, 159] - 1000000*lambda_2[0, 160] + 3000000*lambda_2[0, 162] - 3000000*lambda_2[0, 164] - 1000000*lambda_2[0, 165] - 600000000*lambda_2[0, 166] - 300000000*lambda_2[0, 167] + 1000000000*lambda_2[0, 168] + 300000000*lambda_2[0, 169] - 1000000000*lambda_2[0, 170] - 600000000*lambda_2[0, 171] - 300000000*lambda_2[0, 172] - 100000000*lambda_2[0, 173] - 1000000000*lambda_2[0, 174] - 100000000*lambda_2[0, 175] + 1000000000*lambda_2[0, 176] + 300000000*lambda_2[0, 177] + 300000000*lambda_2[0, 178] - 600000000*lambda_2[0, 180] - 600000000*lambda_2[0, 182] - 300000000*lambda_2[0, 183] - 100000000*lambda_2[0, 184] + 300000000*lambda_2[0, 186] - 300000000*lambda_2[0, 188] - 100000000*lambda_2[0, 189] + 600000000*lambda_2[0, 190] + 100000000*lambda_2[0, 191] + 600000000*lambda_2[0, 192] + 100000000*lambda_2[0, 193] + 10000*lambda_2[0, 194] - 3000000*lambda_2[0, 195] - 1000000*lambda_2[0, 196] + 3000000*lambda_2[0, 197] + 1000000*lambda_2[0, 198] + 600000000*lambda_2[0, 199] + 100000000*lambda_2[0, 200] + 600000000*lambda_2[0, 201] + 100000000*lambda_2[0, 202] + 300000000*lambda_2[0, 203] - 600000000*lambda_2[0, 204] - 300000000*lambda_2[0, 205] - 300000000*lambda_2[0, 206] - 100000000*lambda_2[0, 207] + 300000000*lambda_2[0, 208] <= f*B[0, 9] - l*B[0, 3] + 2*B[0, 3]*t[0, 1] - 0.5]
	# constraints += [lambda_2[0, 4] + lambda_2[0, 6] - 300*lambda_2[0, 8] + 300*lambda_2[0, 10] + 60000*lambda_2[0, 12] + 60000*lambda_2[0, 14] - 10000000*lambda_2[0, 16] + 10000000*lambda_2[0, 18] + 1500000000*lambda_2[0, 20] + 1500000000*lambda_2[0, 22] - lambda_2[0, 25] - 100*lambda_2[0, 30] + 300*lambda_2[0, 32] - 300*lambda_2[0, 34] - 100*lambda_2[0, 35] + 100*lambda_2[0, 36] + 100*lambda_2[0, 38] + 30000*lambda_2[0, 42] - 60000*lambda_2[0, 44] - 60000*lambda_2[0, 46] - 30000*lambda_2[0, 47] - 30000*lambda_2[0, 48] + 30000*lambda_2[0, 50] - 6000000*lambda_2[0, 54] + 10000000*lambda_2[0, 56] - 10000000*lambda_2[0, 58] - 6000000*lambda_2[0, 59] + 6000000*lambda_2[0, 60] + 6000000*lambda_2[0, 62] + 1000000000*lambda_2[0, 66] - 1500000000*lambda_2[0, 68] - 1500000000*lambda_2[0, 70] - 1000000000*lambda_2[0, 71] - 1000000000*lambda_2[0, 72] + 1000000000*lambda_2[0, 74] + 10000*lambda_2[0, 78] + 60000*lambda_2[0, 79] + 10000*lambda_2[0, 80] + 10000*lambda_2[0, 81] + 10000*lambda_2[0, 83] - 3000000*lambda_2[0, 84] - 1000000*lambda_2[0, 85] - 10000000*lambda_2[0, 86] - 1000000*lambda_2[0, 87] + 10000000*lambda_2[0, 88] + 3000000*lambda_2[0, 89] - 3000000*lambda_2[0, 90] + 3000000*lambda_2[0, 92] + 1000000*lambda_2[0, 93] + 1000000*lambda_2[0, 95] + 600000000*lambda_2[0, 96] + 100000000*lambda_2[0, 97] + 1500000000*lambda_2[0, 98] + 100000000*lambda_2[0, 99] + 1500000000*lambda_2[0, 100] + 600000000*lambda_2[0, 101] + 600000000*lambda_2[0, 102] + 600000000*lambda_2[0, 104] + 100000000*lambda_2[0, 105] + 100000000*lambda_2[0, 107] + 300000000*lambda_2[0, 108] - 1500000000*lambda_2[0, 109] - 300000000*lambda_2[0, 110] - 300000000*lambda_2[0, 111] + 300000000*lambda_2[0, 113] + 100*lambda_2[0, 114] - 100*lambda_2[0, 116] - 30000*lambda_2[0, 118] - 10000*lambda_2[0, 119] + 30000*lambda_2[0, 120] - 10000*lambda_2[0, 121] + 30000*lambda_2[0, 123] - 30000*lambda_2[0, 125] - 10000*lambda_2[0, 126] - 10000*lambda_2[0, 128] + 6000000*lambda_2[0, 130] + 1000000*lambda_2[0, 131] + 6000000*lambda_2[0, 132] + 3000000*lambda_2[0, 133] - 6000000*lambda_2[0, 135] - 6000000*lambda_2[0, 137] - 3000000*lambda_2[0, 138] - 1000000*lambda_2[0, 140] - 1000000000*lambda_2[0, 142] - 100000000*lambda_2[0, 143] + 1000000000*lambda_2[0, 144] - 600000000*lambda_2[0, 145] + 1000000000*lambda_2[0, 147] - 1000000000*lambda_2[0, 149] - 600000000*lambda_2[0, 150] - 100000000*lambda_2[0, 152] + 3000000*lambda_2[0, 154] - 6000000*lambda_2[0, 155] - 3000000*lambda_2[0, 156] + 1000000*lambda_2[0, 157] + 6000000*lambda_2[0, 158] + 1000000*lambda_2[0, 159] - 1000000*lambda_2[0, 160] + 3000000*lambda_2[0, 162] - 3000000*lambda_2[0, 164] - 1000000*lambda_2[0, 165] - 600000000*lambda_2[0, 166] - 300000000*lambda_2[0, 167] + 1000000000*lambda_2[0, 168] + 300000000*lambda_2[0, 169] - 1000000000*lambda_2[0, 170] - 600000000*lambda_2[0, 171] - 300000000*lambda_2[0, 172] - 100000000*lambda_2[0, 173] - 1000000000*lambda_2[0, 174] - 100000000*lambda_2[0, 175] + 1000000000*lambda_2[0, 176] + 300000000*lambda_2[0, 177] + 300000000*lambda_2[0, 178] - 600000000*lambda_2[0, 180] - 600000000*lambda_2[0, 182] - 300000000*lambda_2[0, 183] - 100000000*lambda_2[0, 184] + 300000000*lambda_2[0, 186] - 300000000*lambda_2[0, 188] - 100000000*lambda_2[0, 189] + 600000000*lambda_2[0, 190] + 100000000*lambda_2[0, 191] + 600000000*lambda_2[0, 192] + 100000000*lambda_2[0, 193] + 10000*lambda_2[0, 194] - 3000000*lambda_2[0, 195] - 1000000*lambda_2[0, 196] + 3000000*lambda_2[0, 197] + 1000000*lambda_2[0, 198] + 600000000*lambda_2[0, 199] + 100000000*lambda_2[0, 200] + 600000000*lambda_2[0, 201] + 100000000*lambda_2[0, 202] + 300000000*lambda_2[0, 203] - 600000000*lambda_2[0, 204] - 300000000*lambda_2[0, 205] - 300000000*lambda_2[0, 206] - 100000000*lambda_2[0, 207] + 300000000*lambda_2[0, 208] >= f*B[0, 9] - l*B[0, 3] + 2*B[0, 3]*t[0, 1] - 0.5- objc]
	constraints += [lambda_2[0, 8] - lambda_2[0, 10] - 400*lambda_2[0, 12] - 400*lambda_2[0, 14] + 100000*lambda_2[0, 16] - 100000*lambda_2[0, 18] - 20000000*lambda_2[0, 20] - 20000000*lambda_2[0, 22] - lambda_2[0, 32] + lambda_2[0, 34] - 100*lambda_2[0, 42] + 400*lambda_2[0, 44] + 400*lambda_2[0, 46] + 100*lambda_2[0, 47] + 100*lambda_2[0, 48] - 100*lambda_2[0, 50] + 40000*lambda_2[0, 54] - 100000*lambda_2[0, 56] + 100000*lambda_2[0, 58] + 40000*lambda_2[0, 59] - 40000*lambda_2[0, 60] - 40000*lambda_2[0, 62] - 10000000*lambda_2[0, 66] + 20000000*lambda_2[0, 68] + 20000000*lambda_2[0, 70] + 10000000*lambda_2[0, 71] + 10000000*lambda_2[0, 72] - 10000000*lambda_2[0, 74] - 400*lambda_2[0, 79] + 10000*lambda_2[0, 84] + 100000*lambda_2[0, 86] - 100000*lambda_2[0, 88] - 10000*lambda_2[0, 89] + 10000*lambda_2[0, 90] - 10000*lambda_2[0, 92] - 4000000*lambda_2[0, 96] - 20000000*lambda_2[0, 98] - 20000000*lambda_2[0, 100] - 4000000*lambda_2[0, 101] - 4000000*lambda_2[0, 102] - 4000000*lambda_2[0, 104] - 1000000*lambda_2[0, 108] + 20000000*lambda_2[0, 109] + 1000000*lambda_2[0, 110] + 1000000*lambda_2[0, 111] - 1000000*lambda_2[0, 113] + 100*lambda_2[0, 118] - 100*lambda_2[0, 120] - 100*lambda_2[0, 123] + 100*lambda_2[0, 125] - 40000*lambda_2[0, 130] - 40000*lambda_2[0, 132] - 10000*lambda_2[0, 133] + 40000*lambda_2[0, 135] + 40000*lambda_2[0, 137] + 10000*lambda_2[0, 138] + 10000000*lambda_2[0, 142] - 10000000*lambda_2[0, 144] + 4000000*lambda_2[0, 145] - 10000000*lambda_2[0, 147] + 10000000*lambda_2[0, 149] + 4000000*lambda_2[0, 150] - 10000*lambda_2[0, 154] + 40000*lambda_2[0, 155] + 10000*lambda_2[0, 156] - 40000*lambda_2[0, 158] - 10000*lambda_2[0, 162] + 10000*lambda_2[0, 164] + 4000000*lambda_2[0, 166] + 1000000*lambda_2[0, 167] - 10000000*lambda_2[0, 168] - 1000000*lambda_2[0, 169] + 10000000*lambda_2[0, 170] + 4000000*lambda_2[0, 171] + 1000000*lambda_2[0, 172] + 10000000*lambda_2[0, 174] - 10000000*lambda_2[0, 176] - 1000000*lambda_2[0, 177] - 1000000*lambda_2[0, 178] + 4000000*lambda_2[0, 180] + 4000000*lambda_2[0, 182] + 1000000*lambda_2[0, 183] - 1000000*lambda_2[0, 186] + 1000000*lambda_2[0, 188] - 4000000*lambda_2[0, 190] - 4000000*lambda_2[0, 192] + 10000*lambda_2[0, 195] - 10000*lambda_2[0, 197] - 4000000*lambda_2[0, 199] - 4000000*lambda_2[0, 201] - 1000000*lambda_2[0, 203] + 4000000*lambda_2[0, 204] + 1000000*lambda_2[0, 205] + 1000000*lambda_2[0, 206] - 1000000*lambda_2[0, 208] == f*B[0, 10] - l*B[0, 5] + 3*B[0, 5]*t[0, 1]]
	# constraints += [lambda_2[0, 8] - lambda_2[0, 10] - 400*lambda_2[0, 12] - 400*lambda_2[0, 14] + 100000*lambda_2[0, 16] - 100000*lambda_2[0, 18] - 20000000*lambda_2[0, 20] - 20000000*lambda_2[0, 22] - lambda_2[0, 32] + lambda_2[0, 34] - 100*lambda_2[0, 42] + 400*lambda_2[0, 44] + 400*lambda_2[0, 46] + 100*lambda_2[0, 47] + 100*lambda_2[0, 48] - 100*lambda_2[0, 50] + 40000*lambda_2[0, 54] - 100000*lambda_2[0, 56] + 100000*lambda_2[0, 58] + 40000*lambda_2[0, 59] - 40000*lambda_2[0, 60] - 40000*lambda_2[0, 62] - 10000000*lambda_2[0, 66] + 20000000*lambda_2[0, 68] + 20000000*lambda_2[0, 70] + 10000000*lambda_2[0, 71] + 10000000*lambda_2[0, 72] - 10000000*lambda_2[0, 74] - 400*lambda_2[0, 79] + 10000*lambda_2[0, 84] + 100000*lambda_2[0, 86] - 100000*lambda_2[0, 88] - 10000*lambda_2[0, 89] + 10000*lambda_2[0, 90] - 10000*lambda_2[0, 92] - 4000000*lambda_2[0, 96] - 20000000*lambda_2[0, 98] - 20000000*lambda_2[0, 100] - 4000000*lambda_2[0, 101] - 4000000*lambda_2[0, 102] - 4000000*lambda_2[0, 104] - 1000000*lambda_2[0, 108] + 20000000*lambda_2[0, 109] + 1000000*lambda_2[0, 110] + 1000000*lambda_2[0, 111] - 1000000*lambda_2[0, 113] + 100*lambda_2[0, 118] - 100*lambda_2[0, 120] - 100*lambda_2[0, 123] + 100*lambda_2[0, 125] - 40000*lambda_2[0, 130] - 40000*lambda_2[0, 132] - 10000*lambda_2[0, 133] + 40000*lambda_2[0, 135] + 40000*lambda_2[0, 137] + 10000*lambda_2[0, 138] + 10000000*lambda_2[0, 142] - 10000000*lambda_2[0, 144] + 4000000*lambda_2[0, 145] - 10000000*lambda_2[0, 147] + 10000000*lambda_2[0, 149] + 4000000*lambda_2[0, 150] - 10000*lambda_2[0, 154] + 40000*lambda_2[0, 155] + 10000*lambda_2[0, 156] - 40000*lambda_2[0, 158] - 10000*lambda_2[0, 162] + 10000*lambda_2[0, 164] + 4000000*lambda_2[0, 166] + 1000000*lambda_2[0, 167] - 10000000*lambda_2[0, 168] - 1000000*lambda_2[0, 169] + 10000000*lambda_2[0, 170] + 4000000*lambda_2[0, 171] + 1000000*lambda_2[0, 172] + 10000000*lambda_2[0, 174] - 10000000*lambda_2[0, 176] - 1000000*lambda_2[0, 177] - 1000000*lambda_2[0, 178] + 4000000*lambda_2[0, 180] + 4000000*lambda_2[0, 182] + 1000000*lambda_2[0, 183] - 1000000*lambda_2[0, 186] + 1000000*lambda_2[0, 188] - 4000000*lambda_2[0, 190] - 4000000*lambda_2[0, 192] + 10000*lambda_2[0, 195] - 10000*lambda_2[0, 197] - 4000000*lambda_2[0, 199] - 4000000*lambda_2[0, 201] - 1000000*lambda_2[0, 203] + 4000000*lambda_2[0, 204] + 1000000*lambda_2[0, 205] + 1000000*lambda_2[0, 206] - 1000000*lambda_2[0, 208] >= f*B[0, 10] - l*B[0, 5] + 3*B[0, 5]*t[0, 1]- objc]
	constraints += [lambda_2[0, 12] + lambda_2[0, 14] - 500*lambda_2[0, 16] + 500*lambda_2[0, 18] + 150000*lambda_2[0, 20] + 150000*lambda_2[0, 22] - lambda_2[0, 44] - lambda_2[0, 46] - 100*lambda_2[0, 54] + 500*lambda_2[0, 56] - 500*lambda_2[0, 58] - 100*lambda_2[0, 59] + 100*lambda_2[0, 60] + 100*lambda_2[0, 62] + 50000*lambda_2[0, 66] - 150000*lambda_2[0, 68] - 150000*lambda_2[0, 70] - 50000*lambda_2[0, 71] - 50000*lambda_2[0, 72] + 50000*lambda_2[0, 74] + lambda_2[0, 79] - 500*lambda_2[0, 86] + 500*lambda_2[0, 88] + 10000*lambda_2[0, 96] + 150000*lambda_2[0, 98] + 150000*lambda_2[0, 100] + 10000*lambda_2[0, 101] + 10000*lambda_2[0, 102] + 10000*lambda_2[0, 104] - 150000*lambda_2[0, 109] + 100*lambda_2[0, 130] + 100*lambda_2[0, 132] - 100*lambda_2[0, 135] - 100*lambda_2[0, 137] - 50000*lambda_2[0, 142] + 50000*lambda_2[0, 144] - 10000*lambda_2[0, 145] + 50000*lambda_2[0, 147] - 50000*lambda_2[0, 149] - 10000*lambda_2[0, 150] - 100*lambda_2[0, 155] + 100*lambda_2[0, 158] - 10000*lambda_2[0, 166] + 50000*lambda_2[0, 168] - 50000*lambda_2[0, 170] - 10000*lambda_2[0, 171] - 50000*lambda_2[0, 174] + 50000*lambda_2[0, 176] - 10000*lambda_2[0, 180] - 10000*lambda_2[0, 182] + 10000*lambda_2[0, 190] + 10000*lambda_2[0, 192] + 10000*lambda_2[0, 199] + 10000*lambda_2[0, 201] - 10000*lambda_2[0, 204] == f*B[0, 12] - l*B[0, 7] + 4*B[0, 7]*t[0, 1]+ objc]
	# constraints += [lambda_2[0, 12] + lambda_2[0, 14] - 500*lambda_2[0, 16] + 500*lambda_2[0, 18] + 150000*lambda_2[0, 20] + 150000*lambda_2[0, 22] - lambda_2[0, 44] - lambda_2[0, 46] - 100*lambda_2[0, 54] + 500*lambda_2[0, 56] - 500*lambda_2[0, 58] - 100*lambda_2[0, 59] + 100*lambda_2[0, 60] + 100*lambda_2[0, 62] + 50000*lambda_2[0, 66] - 150000*lambda_2[0, 68] - 150000*lambda_2[0, 70] - 50000*lambda_2[0, 71] - 50000*lambda_2[0, 72] + 50000*lambda_2[0, 74] + lambda_2[0, 79] - 500*lambda_2[0, 86] + 500*lambda_2[0, 88] + 10000*lambda_2[0, 96] + 150000*lambda_2[0, 98] + 150000*lambda_2[0, 100] + 10000*lambda_2[0, 101] + 10000*lambda_2[0, 102] + 10000*lambda_2[0, 104] - 150000*lambda_2[0, 109] + 100*lambda_2[0, 130] + 100*lambda_2[0, 132] - 100*lambda_2[0, 135] - 100*lambda_2[0, 137] - 50000*lambda_2[0, 142] + 50000*lambda_2[0, 144] - 10000*lambda_2[0, 145] + 50000*lambda_2[0, 147] - 50000*lambda_2[0, 149] - 10000*lambda_2[0, 150] - 100*lambda_2[0, 155] + 100*lambda_2[0, 158] - 10000*lambda_2[0, 166] + 50000*lambda_2[0, 168] - 50000*lambda_2[0, 170] - 10000*lambda_2[0, 171] - 50000*lambda_2[0, 174] + 50000*lambda_2[0, 176] - 10000*lambda_2[0, 180] - 10000*lambda_2[0, 182] + 10000*lambda_2[0, 190] + 10000*lambda_2[0, 192] + 10000*lambda_2[0, 199] + 10000*lambda_2[0, 201] - 10000*lambda_2[0, 204] >= f*B[0, 12] - l*B[0, 7] + 4*B[0, 7]*t[0, 1]- objc]
	constraints += [lambda_2[0, 16] - lambda_2[0, 18] - 600*lambda_2[0, 20] - 600*lambda_2[0, 22] - lambda_2[0, 56] + lambda_2[0, 58] - 100*lambda_2[0, 66] + 600*lambda_2[0, 68] + 600*lambda_2[0, 70] + 100*lambda_2[0, 71] + 100*lambda_2[0, 72] - 100*lambda_2[0, 74] + lambda_2[0, 86] - lambda_2[0, 88] - 600*lambda_2[0, 98] - 600*lambda_2[0, 100] + 600*lambda_2[0, 109] + 100*lambda_2[0, 142] - 100*lambda_2[0, 144] - 100*lambda_2[0, 147] + 100*lambda_2[0, 149] - 100*lambda_2[0, 168] + 100*lambda_2[0, 170] + 100*lambda_2[0, 174] - 100*lambda_2[0, 176] == 0]
	constraints += [lambda_2[0, 20] + lambda_2[0, 22] - lambda_2[0, 68] - lambda_2[0, 70] + lambda_2[0, 98] + lambda_2[0, 100] - lambda_2[0, 109] == 0]
	constraints += [lambda_2[0, 1] - lambda_2[0, 3] - 200*lambda_2[0, 5] - 200*lambda_2[0, 7] + 30000*lambda_2[0, 9] - 30000*lambda_2[0, 11] - 4000000*lambda_2[0, 13] - 4000000*lambda_2[0, 15] + 500000000*lambda_2[0, 17] - 500000000*lambda_2[0, 19] - 60000000000*lambda_2[0, 21] - 60000000000*lambda_2[0, 23] - 100*lambda_2[0, 24] + 100*lambda_2[0, 26] + 100*lambda_2[0, 27] + 200*lambda_2[0, 28] - 100*lambda_2[0, 29] + 10000*lambda_2[0, 30] + 20000*lambda_2[0, 31] - 20000*lambda_2[0, 33] + 10000*lambda_2[0, 35] - 10000*lambda_2[0, 36] - 30000*lambda_2[0, 37] - 10000*lambda_2[0, 38] + 20000*lambda_2[0, 39] + 30000*lambda_2[0, 40] - 20000*lambda_2[0, 41] - 1000000*lambda_2[0, 42] - 3000000*lambda_2[0, 43] + 3000000*lambda_2[0, 45] + 1000000*lambda_2[0, 47] + 1000000*lambda_2[0, 48] + 4000000*lambda_2[0, 49] - 1000000*lambda_2[0, 50] + 3000000*lambda_2[0, 51] + 4000000*lambda_2[0, 52] - 3000000*lambda_2[0, 53] + 100000000*lambda_2[0, 54] + 400000000*lambda_2[0, 55] - 400000000*lambda_2[0, 57] + 100000000*lambda_2[0, 59] - 100000000*lambda_2[0, 60] - 500000000*lambda_2[0, 61] - 100000000*lambda_2[0, 62] + 400000000*lambda_2[0, 63] + 500000000*lambda_2[0, 64] - 400000000*lambda_2[0, 65] - 10000000000*lambda_2[0, 66] - 50000000000*lambda_2[0, 67] + 50000000000*lambda_2[0, 69] + 10000000000*lambda_2[0, 71] + 10000000000*lambda_2[0, 72] + 60000000000*lambda_2[0, 73] - 10000000000*lambda_2[0, 74] + 50000000000*lambda_2[0, 75] + 60000000000*lambda_2[0, 76] - 50000000000*lambda_2[0, 77] - 2000000*lambda_2[0, 78] - 2000000*lambda_2[0, 80] - 2000000*lambda_2[0, 81] - 4000000*lambda_2[0, 82] - 2000000*lambda_2[0, 83] + 200000000*lambda_2[0, 84] + 300000000*lambda_2[0, 85] + 300000000*lambda_2[0, 87] - 200000000*lambda_2[0, 89] + 200000000*lambda_2[0, 90] + 500000000*lambda_2[0, 91] - 200000000*lambda_2[0, 92] - 300000000*lambda_2[0, 93] - 500000000*lambda_2[0, 94] - 300000000*lambda_2[0, 95] - 20000000000*lambda_2[0, 96] - 40000000000*lambda_2[0, 97] - 40000000000*lambda_2[0, 99] - 20000000000*lambda_2[0, 101] - 20000000000*lambda_2[0, 102] - 60000000000*lambda_2[0, 103] - 20000000000*lambda_2[0, 104] - 40000000000*lambda_2[0, 105] - 60000000000*lambda_2[0, 106] - 40000000000*lambda_2[0, 107] - 30000000000*lambda_2[0, 108] + 30000000000*lambda_2[0, 110] + 30000000000*lambda_2[0, 111] + 60000000000*lambda_2[0, 112] - 30000000000*lambda_2[0, 113] - 10000*lambda_2[0, 114] - 20000*lambda_2[0, 115] + 10000*lambda_2[0, 116] + 20000*lambda_2[0, 117] + 1000000*lambda_2[0, 118] + 2000000*lambda_2[0, 119] - 1000000*lambda_2[0, 120] + 2000000*lambda_2[0, 121] + 3000000*lambda_2[0, 122] - 1000000*lambda_2[0, 123] - 3000000*lambda_2[0, 124] + 1000000*lambda_2[0, 125] + 2000000*lambda_2[0, 126] - 3000000*lambda_2[0, 127] + 2000000*lambda_2[0, 128] + 3000000*lambda_2[0, 129] - 100000000*lambda_2[0, 130] - 300000000*lambda_2[0, 131] - 100000000*lambda_2[0, 132] - 200000000*lambda_2[0, 133] - 400000000*lambda_2[0, 134] + 100000000*lambda_2[0, 135] + 400000000*lambda_2[0, 136] + 100000000*lambda_2[0, 137] + 200000000*lambda_2[0, 138] - 400000000*lambda_2[0, 139] + 300000000*lambda_2[0, 140] + 400000000*lambda_2[0, 141] + 10000000000*lambda_2[0, 142] + 40000000000*lambda_2[0, 143] - 10000000000*lambda_2[0, 144] + 20000000000*lambda_2[0, 145] + 50000000000*lambda_2[0, 146] - 10000000000*lambda_2[0, 147] - 50000000000*lambda_2[0, 148] + 10000000000*lambda_2[0, 149] + 20000000000*lambda_2[0, 150] - 50000000000*lambda_2[0, 151] + 40000000000*lambda_2[0, 152] + 50000000000*lambda_2[0, 153] - 200000000*lambda_2[0, 154] + 100000000*lambda_2[0, 155] + 200000000*lambda_2[0, 156] - 300000000*lambda_2[0, 157] - 100000000*lambda_2[0, 158] - 300000000*lambda_2[0, 159] + 300000000*lambda_2[0, 160] + 400000000*lambda_2[0, 161] - 200000000*lambda_2[0, 162] - 400000000*lambda_2[0, 163] + 200000000*lambda_2[0, 164] + 300000000*lambda_2[0, 165] + 20000000000*lambda_2[0, 166] + 30000000000*lambda_2[0, 167] - 10000000000*lambda_2[0, 168] - 30000000000*lambda_2[0, 169] + 10000000000*lambda_2[0, 170] + 20000000000*lambda_2[0, 171] + 30000000000*lambda_2[0, 172] + 40000000000*lambda_2[0, 173] + 10000000000*lambda_2[0, 174] + 40000000000*lambda_2[0, 175] - 10000000000*lambda_2[0, 176] - 30000000000*lambda_2[0, 177] - 30000000000*lambda_2[0, 178] - 50000000000*lambda_2[0, 179] + 20000000000*lambda_2[0, 180] + 50000000000*lambda_2[0, 181] + 20000000000*lambda_2[0, 182] + 30000000000*lambda_2[0, 183] + 40000000000*lambda_2[0, 184] + 50000000000*lambda_2[0, 185] - 30000000000*lambda_2[0, 186] - 50000000000*lambda_2[0, 187] + 30000000000*lambda_2[0, 188] + 40000000000*lambda_2[0, 189] - 20000000000*lambda_2[0, 190] - 40000000000*lambda_2[0, 191] - 20000000000*lambda_2[0, 192] - 40000000000*lambda_2[0, 193] - 2000000*lambda_2[0, 194] + 200000000*lambda_2[0, 195] + 300000000*lambda_2[0, 196] - 200000000*lambda_2[0, 197] - 300000000*lambda_2[0, 198] - 20000000000*lambda_2[0, 199] - 40000000000*lambda_2[0, 200] - 20000000000*lambda_2[0, 201] - 40000000000*lambda_2[0, 202] - 30000000000*lambda_2[0, 203] + 20000000000*lambda_2[0, 204] + 30000000000*lambda_2[0, 205] + 30000000000*lambda_2[0, 206] + 40000000000*lambda_2[0, 207] - 30000000000*lambda_2[0, 208] <= -l*B[0, 2] + B[0, 1]*t[0, 0]+ objc]
	constraints += [lambda_2[0, 1] - lambda_2[0, 3] - 200*lambda_2[0, 5] - 200*lambda_2[0, 7] + 30000*lambda_2[0, 9] - 30000*lambda_2[0, 11] - 4000000*lambda_2[0, 13] - 4000000*lambda_2[0, 15] + 500000000*lambda_2[0, 17] - 500000000*lambda_2[0, 19] - 60000000000*lambda_2[0, 21] - 60000000000*lambda_2[0, 23] - 100*lambda_2[0, 24] + 100*lambda_2[0, 26] + 100*lambda_2[0, 27] + 200*lambda_2[0, 28] - 100*lambda_2[0, 29] + 10000*lambda_2[0, 30] + 20000*lambda_2[0, 31] - 20000*lambda_2[0, 33] + 10000*lambda_2[0, 35] - 10000*lambda_2[0, 36] - 30000*lambda_2[0, 37] - 10000*lambda_2[0, 38] + 20000*lambda_2[0, 39] + 30000*lambda_2[0, 40] - 20000*lambda_2[0, 41] - 1000000*lambda_2[0, 42] - 3000000*lambda_2[0, 43] + 3000000*lambda_2[0, 45] + 1000000*lambda_2[0, 47] + 1000000*lambda_2[0, 48] + 4000000*lambda_2[0, 49] - 1000000*lambda_2[0, 50] + 3000000*lambda_2[0, 51] + 4000000*lambda_2[0, 52] - 3000000*lambda_2[0, 53] + 100000000*lambda_2[0, 54] + 400000000*lambda_2[0, 55] - 400000000*lambda_2[0, 57] + 100000000*lambda_2[0, 59] - 100000000*lambda_2[0, 60] - 500000000*lambda_2[0, 61] - 100000000*lambda_2[0, 62] + 400000000*lambda_2[0, 63] + 500000000*lambda_2[0, 64] - 400000000*lambda_2[0, 65] - 10000000000*lambda_2[0, 66] - 50000000000*lambda_2[0, 67] + 50000000000*lambda_2[0, 69] + 10000000000*lambda_2[0, 71] + 10000000000*lambda_2[0, 72] + 60000000000*lambda_2[0, 73] - 10000000000*lambda_2[0, 74] + 50000000000*lambda_2[0, 75] + 60000000000*lambda_2[0, 76] - 50000000000*lambda_2[0, 77] - 2000000*lambda_2[0, 78] - 2000000*lambda_2[0, 80] - 2000000*lambda_2[0, 81] - 4000000*lambda_2[0, 82] - 2000000*lambda_2[0, 83] + 200000000*lambda_2[0, 84] + 300000000*lambda_2[0, 85] + 300000000*lambda_2[0, 87] - 200000000*lambda_2[0, 89] + 200000000*lambda_2[0, 90] + 500000000*lambda_2[0, 91] - 200000000*lambda_2[0, 92] - 300000000*lambda_2[0, 93] - 500000000*lambda_2[0, 94] - 300000000*lambda_2[0, 95] - 20000000000*lambda_2[0, 96] - 40000000000*lambda_2[0, 97] - 40000000000*lambda_2[0, 99] - 20000000000*lambda_2[0, 101] - 20000000000*lambda_2[0, 102] - 60000000000*lambda_2[0, 103] - 20000000000*lambda_2[0, 104] - 40000000000*lambda_2[0, 105] - 60000000000*lambda_2[0, 106] - 40000000000*lambda_2[0, 107] - 30000000000*lambda_2[0, 108] + 30000000000*lambda_2[0, 110] + 30000000000*lambda_2[0, 111] + 60000000000*lambda_2[0, 112] - 30000000000*lambda_2[0, 113] - 10000*lambda_2[0, 114] - 20000*lambda_2[0, 115] + 10000*lambda_2[0, 116] + 20000*lambda_2[0, 117] + 1000000*lambda_2[0, 118] + 2000000*lambda_2[0, 119] - 1000000*lambda_2[0, 120] + 2000000*lambda_2[0, 121] + 3000000*lambda_2[0, 122] - 1000000*lambda_2[0, 123] - 3000000*lambda_2[0, 124] + 1000000*lambda_2[0, 125] + 2000000*lambda_2[0, 126] - 3000000*lambda_2[0, 127] + 2000000*lambda_2[0, 128] + 3000000*lambda_2[0, 129] - 100000000*lambda_2[0, 130] - 300000000*lambda_2[0, 131] - 100000000*lambda_2[0, 132] - 200000000*lambda_2[0, 133] - 400000000*lambda_2[0, 134] + 100000000*lambda_2[0, 135] + 400000000*lambda_2[0, 136] + 100000000*lambda_2[0, 137] + 200000000*lambda_2[0, 138] - 400000000*lambda_2[0, 139] + 300000000*lambda_2[0, 140] + 400000000*lambda_2[0, 141] + 10000000000*lambda_2[0, 142] + 40000000000*lambda_2[0, 143] - 10000000000*lambda_2[0, 144] + 20000000000*lambda_2[0, 145] + 50000000000*lambda_2[0, 146] - 10000000000*lambda_2[0, 147] - 50000000000*lambda_2[0, 148] + 10000000000*lambda_2[0, 149] + 20000000000*lambda_2[0, 150] - 50000000000*lambda_2[0, 151] + 40000000000*lambda_2[0, 152] + 50000000000*lambda_2[0, 153] - 200000000*lambda_2[0, 154] + 100000000*lambda_2[0, 155] + 200000000*lambda_2[0, 156] - 300000000*lambda_2[0, 157] - 100000000*lambda_2[0, 158] - 300000000*lambda_2[0, 159] + 300000000*lambda_2[0, 160] + 400000000*lambda_2[0, 161] - 200000000*lambda_2[0, 162] - 400000000*lambda_2[0, 163] + 200000000*lambda_2[0, 164] + 300000000*lambda_2[0, 165] + 20000000000*lambda_2[0, 166] + 30000000000*lambda_2[0, 167] - 10000000000*lambda_2[0, 168] - 30000000000*lambda_2[0, 169] + 10000000000*lambda_2[0, 170] + 20000000000*lambda_2[0, 171] + 30000000000*lambda_2[0, 172] + 40000000000*lambda_2[0, 173] + 10000000000*lambda_2[0, 174] + 40000000000*lambda_2[0, 175] - 10000000000*lambda_2[0, 176] - 30000000000*lambda_2[0, 177] - 30000000000*lambda_2[0, 178] - 50000000000*lambda_2[0, 179] + 20000000000*lambda_2[0, 180] + 50000000000*lambda_2[0, 181] + 20000000000*lambda_2[0, 182] + 30000000000*lambda_2[0, 183] + 40000000000*lambda_2[0, 184] + 50000000000*lambda_2[0, 185] - 30000000000*lambda_2[0, 186] - 50000000000*lambda_2[0, 187] + 30000000000*lambda_2[0, 188] + 40000000000*lambda_2[0, 189] - 20000000000*lambda_2[0, 190] - 40000000000*lambda_2[0, 191] - 20000000000*lambda_2[0, 192] - 40000000000*lambda_2[0, 193] - 2000000*lambda_2[0, 194] + 200000000*lambda_2[0, 195] + 300000000*lambda_2[0, 196] - 200000000*lambda_2[0, 197] - 300000000*lambda_2[0, 198] - 20000000000*lambda_2[0, 199] - 40000000000*lambda_2[0, 200] - 20000000000*lambda_2[0, 201] - 40000000000*lambda_2[0, 202] - 30000000000*lambda_2[0, 203] + 20000000000*lambda_2[0, 204] + 30000000000*lambda_2[0, 205] + 30000000000*lambda_2[0, 206] + 40000000000*lambda_2[0, 207] - 30000000000*lambda_2[0, 208] >= -l*B[0, 2] + B[0, 1]*t[0, 0]- objc]
	constraints += [lambda_2[0, 24] - lambda_2[0, 26] - lambda_2[0, 27] + lambda_2[0, 29] - 200*lambda_2[0, 30] - 200*lambda_2[0, 31] + 200*lambda_2[0, 33] - 200*lambda_2[0, 35] + 200*lambda_2[0, 36] + 200*lambda_2[0, 38] - 200*lambda_2[0, 39] + 200*lambda_2[0, 41] + 30000*lambda_2[0, 42] + 30000*lambda_2[0, 43] - 30000*lambda_2[0, 45] - 30000*lambda_2[0, 47] - 30000*lambda_2[0, 48] + 30000*lambda_2[0, 50] - 30000*lambda_2[0, 51] + 30000*lambda_2[0, 53] - 4000000*lambda_2[0, 54] - 4000000*lambda_2[0, 55] + 4000000*lambda_2[0, 57] - 4000000*lambda_2[0, 59] + 4000000*lambda_2[0, 60] + 4000000*lambda_2[0, 62] - 4000000*lambda_2[0, 63] + 4000000*lambda_2[0, 65] + 500000000*lambda_2[0, 66] + 500000000*lambda_2[0, 67] - 500000000*lambda_2[0, 69] - 500000000*lambda_2[0, 71] - 500000000*lambda_2[0, 72] + 500000000*lambda_2[0, 74] - 500000000*lambda_2[0, 75] + 500000000*lambda_2[0, 77] + 40000*lambda_2[0, 78] + 40000*lambda_2[0, 80] + 40000*lambda_2[0, 81] + 40000*lambda_2[0, 83] - 6000000*lambda_2[0, 84] - 6000000*lambda_2[0, 85] - 6000000*lambda_2[0, 87] + 6000000*lambda_2[0, 89] - 6000000*lambda_2[0, 90] + 6000000*lambda_2[0, 92] + 6000000*lambda_2[0, 93] + 6000000*lambda_2[0, 95] + 800000000*lambda_2[0, 96] + 800000000*lambda_2[0, 97] + 800000000*lambda_2[0, 99] + 800000000*lambda_2[0, 101] + 800000000*lambda_2[0, 102] + 800000000*lambda_2[0, 104] + 800000000*lambda_2[0, 105] + 800000000*lambda_2[0, 107] + 900000000*lambda_2[0, 108] - 900000000*lambda_2[0, 110] - 900000000*lambda_2[0, 111] + 900000000*lambda_2[0, 113] + 200*lambda_2[0, 114] + 200*lambda_2[0, 115] - 200*lambda_2[0, 116] - 200*lambda_2[0, 117] - 30000*lambda_2[0, 118] - 40000*lambda_2[0, 119] + 30000*lambda_2[0, 120] - 40000*lambda_2[0, 121] - 30000*lambda_2[0, 122] + 30000*lambda_2[0, 123] + 30000*lambda_2[0, 124] - 30000*lambda_2[0, 125] - 40000*lambda_2[0, 126] + 30000*lambda_2[0, 127] - 40000*lambda_2[0, 128] - 30000*lambda_2[0, 129] + 4000000*lambda_2[0, 130] + 6000000*lambda_2[0, 131] + 4000000*lambda_2[0, 132] + 6000000*lambda_2[0, 133] + 4000000*lambda_2[0, 134] - 4000000*lambda_2[0, 135] - 4000000*lambda_2[0, 136] - 4000000*lambda_2[0, 137] - 6000000*lambda_2[0, 138] + 4000000*lambda_2[0, 139] - 6000000*lambda_2[0, 140] - 4000000*lambda_2[0, 141] - 500000000*lambda_2[0, 142] - 800000000*lambda_2[0, 143] + 500000000*lambda_2[0, 144] - 800000000*lambda_2[0, 145] - 500000000*lambda_2[0, 146] + 500000000*lambda_2[0, 147] + 500000000*lambda_2[0, 148] - 500000000*lambda_2[0, 149] - 800000000*lambda_2[0, 150] + 500000000*lambda_2[0, 151] - 800000000*lambda_2[0, 152] - 500000000*lambda_2[0, 153] + 6000000*lambda_2[0, 154] - 4000000*lambda_2[0, 155] - 6000000*lambda_2[0, 156] + 6000000*lambda_2[0, 157] + 4000000*lambda_2[0, 158] + 6000000*lambda_2[0, 159] - 6000000*lambda_2[0, 160] - 4000000*lambda_2[0, 161] + 6000000*lambda_2[0, 162] + 4000000*lambda_2[0, 163] - 6000000*lambda_2[0, 164] - 6000000*lambda_2[0, 165] - 800000000*lambda_2[0, 166] - 900000000*lambda_2[0, 167] + 500000000*lambda_2[0, 168] + 900000000*lambda_2[0, 169] - 500000000*lambda_2[0, 170] - 800000000*lambda_2[0, 171] - 900000000*lambda_2[0, 172] - 800000000*lambda_2[0, 173] - 500000000*lambda_2[0, 174] - 800000000*lambda_2[0, 175] + 500000000*lambda_2[0, 176] + 900000000*lambda_2[0, 177] + 900000000*lambda_2[0, 178] + 500000000*lambda_2[0, 179] - 800000000*lambda_2[0, 180] - 500000000*lambda_2[0, 181] - 800000000*lambda_2[0, 182] - 900000000*lambda_2[0, 183] - 800000000*lambda_2[0, 184] - 500000000*lambda_2[0, 185] + 900000000*lambda_2[0, 186] + 500000000*lambda_2[0, 187] - 900000000*lambda_2[0, 188] - 800000000*lambda_2[0, 189] + 800000000*lambda_2[0, 190] + 800000000*lambda_2[0, 191] + 800000000*lambda_2[0, 192] + 800000000*lambda_2[0, 193] + 40000*lambda_2[0, 194] - 6000000*lambda_2[0, 195] - 6000000*lambda_2[0, 196] + 6000000*lambda_2[0, 197] + 6000000*lambda_2[0, 198] + 800000000*lambda_2[0, 199] + 800000000*lambda_2[0, 200] + 800000000*lambda_2[0, 201] + 800000000*lambda_2[0, 202] + 900000000*lambda_2[0, 203] - 800000000*lambda_2[0, 204] - 900000000*lambda_2[0, 205] - 900000000*lambda_2[0, 206] - 800000000*lambda_2[0, 207] + 900000000*lambda_2[0, 208] == 2*f*B[0, 4] - l*B[0, 9] + 2*B[0, 3]*t[0, 0] + B[0, 9]*t[0, 1]]
	# constraints += [lambda_2[0, 24] - lambda_2[0, 26] - lambda_2[0, 27] + lambda_2[0, 29] - 200*lambda_2[0, 30] - 200*lambda_2[0, 31] + 200*lambda_2[0, 33] - 200*lambda_2[0, 35] + 200*lambda_2[0, 36] + 200*lambda_2[0, 38] - 200*lambda_2[0, 39] + 200*lambda_2[0, 41] + 30000*lambda_2[0, 42] + 30000*lambda_2[0, 43] - 30000*lambda_2[0, 45] - 30000*lambda_2[0, 47] - 30000*lambda_2[0, 48] + 30000*lambda_2[0, 50] - 30000*lambda_2[0, 51] + 30000*lambda_2[0, 53] - 4000000*lambda_2[0, 54] - 4000000*lambda_2[0, 55] + 4000000*lambda_2[0, 57] - 4000000*lambda_2[0, 59] + 4000000*lambda_2[0, 60] + 4000000*lambda_2[0, 62] - 4000000*lambda_2[0, 63] + 4000000*lambda_2[0, 65] + 500000000*lambda_2[0, 66] + 500000000*lambda_2[0, 67] - 500000000*lambda_2[0, 69] - 500000000*lambda_2[0, 71] - 500000000*lambda_2[0, 72] + 500000000*lambda_2[0, 74] - 500000000*lambda_2[0, 75] + 500000000*lambda_2[0, 77] + 40000*lambda_2[0, 78] + 40000*lambda_2[0, 80] + 40000*lambda_2[0, 81] + 40000*lambda_2[0, 83] - 6000000*lambda_2[0, 84] - 6000000*lambda_2[0, 85] - 6000000*lambda_2[0, 87] + 6000000*lambda_2[0, 89] - 6000000*lambda_2[0, 90] + 6000000*lambda_2[0, 92] + 6000000*lambda_2[0, 93] + 6000000*lambda_2[0, 95] + 800000000*lambda_2[0, 96] + 800000000*lambda_2[0, 97] + 800000000*lambda_2[0, 99] + 800000000*lambda_2[0, 101] + 800000000*lambda_2[0, 102] + 800000000*lambda_2[0, 104] + 800000000*lambda_2[0, 105] + 800000000*lambda_2[0, 107] + 900000000*lambda_2[0, 108] - 900000000*lambda_2[0, 110] - 900000000*lambda_2[0, 111] + 900000000*lambda_2[0, 113] + 200*lambda_2[0, 114] + 200*lambda_2[0, 115] - 200*lambda_2[0, 116] - 200*lambda_2[0, 117] - 30000*lambda_2[0, 118] - 40000*lambda_2[0, 119] + 30000*lambda_2[0, 120] - 40000*lambda_2[0, 121] - 30000*lambda_2[0, 122] + 30000*lambda_2[0, 123] + 30000*lambda_2[0, 124] - 30000*lambda_2[0, 125] - 40000*lambda_2[0, 126] + 30000*lambda_2[0, 127] - 40000*lambda_2[0, 128] - 30000*lambda_2[0, 129] + 4000000*lambda_2[0, 130] + 6000000*lambda_2[0, 131] + 4000000*lambda_2[0, 132] + 6000000*lambda_2[0, 133] + 4000000*lambda_2[0, 134] - 4000000*lambda_2[0, 135] - 4000000*lambda_2[0, 136] - 4000000*lambda_2[0, 137] - 6000000*lambda_2[0, 138] + 4000000*lambda_2[0, 139] - 6000000*lambda_2[0, 140] - 4000000*lambda_2[0, 141] - 500000000*lambda_2[0, 142] - 800000000*lambda_2[0, 143] + 500000000*lambda_2[0, 144] - 800000000*lambda_2[0, 145] - 500000000*lambda_2[0, 146] + 500000000*lambda_2[0, 147] + 500000000*lambda_2[0, 148] - 500000000*lambda_2[0, 149] - 800000000*lambda_2[0, 150] + 500000000*lambda_2[0, 151] - 800000000*lambda_2[0, 152] - 500000000*lambda_2[0, 153] + 6000000*lambda_2[0, 154] - 4000000*lambda_2[0, 155] - 6000000*lambda_2[0, 156] + 6000000*lambda_2[0, 157] + 4000000*lambda_2[0, 158] + 6000000*lambda_2[0, 159] - 6000000*lambda_2[0, 160] - 4000000*lambda_2[0, 161] + 6000000*lambda_2[0, 162] + 4000000*lambda_2[0, 163] - 6000000*lambda_2[0, 164] - 6000000*lambda_2[0, 165] - 800000000*lambda_2[0, 166] - 900000000*lambda_2[0, 167] + 500000000*lambda_2[0, 168] + 900000000*lambda_2[0, 169] - 500000000*lambda_2[0, 170] - 800000000*lambda_2[0, 171] - 900000000*lambda_2[0, 172] - 800000000*lambda_2[0, 173] - 500000000*lambda_2[0, 174] - 800000000*lambda_2[0, 175] + 500000000*lambda_2[0, 176] + 900000000*lambda_2[0, 177] + 900000000*lambda_2[0, 178] + 500000000*lambda_2[0, 179] - 800000000*lambda_2[0, 180] - 500000000*lambda_2[0, 181] - 800000000*lambda_2[0, 182] - 900000000*lambda_2[0, 183] - 800000000*lambda_2[0, 184] - 500000000*lambda_2[0, 185] + 900000000*lambda_2[0, 186] + 500000000*lambda_2[0, 187] - 900000000*lambda_2[0, 188] - 800000000*lambda_2[0, 189] + 800000000*lambda_2[0, 190] + 800000000*lambda_2[0, 191] + 800000000*lambda_2[0, 192] + 800000000*lambda_2[0, 193] + 40000*lambda_2[0, 194] - 6000000*lambda_2[0, 195] - 6000000*lambda_2[0, 196] + 6000000*lambda_2[0, 197] + 6000000*lambda_2[0, 198] + 800000000*lambda_2[0, 199] + 800000000*lambda_2[0, 200] + 800000000*lambda_2[0, 201] + 800000000*lambda_2[0, 202] + 900000000*lambda_2[0, 203] - 800000000*lambda_2[0, 204] - 900000000*lambda_2[0, 205] - 900000000*lambda_2[0, 206] - 800000000*lambda_2[0, 207] + 900000000*lambda_2[0, 208] >= 2*f*B[0, 4] - l*B[0, 9] + 2*B[0, 3]*t[0, 0] + B[0, 9]*t[0, 1]- objc]
	constraints += [lambda_2[0, 30] + lambda_2[0, 35] - lambda_2[0, 36] - lambda_2[0, 38] - 300*lambda_2[0, 42] + 300*lambda_2[0, 47] + 300*lambda_2[0, 48] - 300*lambda_2[0, 50] + 60000*lambda_2[0, 54] + 60000*lambda_2[0, 59] - 60000*lambda_2[0, 60] - 60000*lambda_2[0, 62] - 10000000*lambda_2[0, 66] + 10000000*lambda_2[0, 71] + 10000000*lambda_2[0, 72] - 10000000*lambda_2[0, 74] - 200*lambda_2[0, 78] - 200*lambda_2[0, 80] - 200*lambda_2[0, 81] - 200*lambda_2[0, 83] + 60000*lambda_2[0, 84] + 30000*lambda_2[0, 85] + 30000*lambda_2[0, 87] - 60000*lambda_2[0, 89] + 60000*lambda_2[0, 90] - 60000*lambda_2[0, 92] - 30000*lambda_2[0, 93] - 30000*lambda_2[0, 95] - 12000000*lambda_2[0, 96] - 4000000*lambda_2[0, 97] - 4000000*lambda_2[0, 99] - 12000000*lambda_2[0, 101] - 12000000*lambda_2[0, 102] - 12000000*lambda_2[0, 104] - 4000000*lambda_2[0, 105] - 4000000*lambda_2[0, 107] - 9000000*lambda_2[0, 108] + 9000000*lambda_2[0, 110] + 9000000*lambda_2[0, 111] - 9000000*lambda_2[0, 113] - lambda_2[0, 114] + lambda_2[0, 116] + 300*lambda_2[0, 118] + 200*lambda_2[0, 119] - 300*lambda_2[0, 120] + 200*lambda_2[0, 121] - 300*lambda_2[0, 123] + 300*lambda_2[0, 125] + 200*lambda_2[0, 126] + 200*lambda_2[0, 128] - 60000*lambda_2[0, 130] - 30000*lambda_2[0, 131] - 60000*lambda_2[0, 132] - 60000*lambda_2[0, 133] + 60000*lambda_2[0, 135] + 60000*lambda_2[0, 137] + 60000*lambda_2[0, 138] + 30000*lambda_2[0, 140] + 10000000*lambda_2[0, 142] + 4000000*lambda_2[0, 143] - 10000000*lambda_2[0, 144] + 12000000*lambda_2[0, 145] - 10000000*lambda_2[0, 147] + 10000000*lambda_2[0, 149] + 12000000*lambda_2[0, 150] + 4000000*lambda_2[0, 152] - 60000*lambda_2[0, 154] + 60000*lambda_2[0, 155] + 60000*lambda_2[0, 156] - 30000*lambda_2[0, 157] - 60000*lambda_2[0, 158] - 30000*lambda_2[0, 159] + 30000*lambda_2[0, 160] - 60000*lambda_2[0, 162] + 60000*lambda_2[0, 164] + 30000*lambda_2[0, 165] + 12000000*lambda_2[0, 166] + 9000000*lambda_2[0, 167] - 10000000*lambda_2[0, 168] - 9000000*lambda_2[0, 169] + 10000000*lambda_2[0, 170] + 12000000*lambda_2[0, 171] + 9000000*lambda_2[0, 172] + 4000000*lambda_2[0, 173] + 10000000*lambda_2[0, 174] + 4000000*lambda_2[0, 175] - 10000000*lambda_2[0, 176] - 9000000*lambda_2[0, 177] - 9000000*lambda_2[0, 178] + 12000000*lambda_2[0, 180] + 12000000*lambda_2[0, 182] + 9000000*lambda_2[0, 183] + 4000000*lambda_2[0, 184] - 9000000*lambda_2[0, 186] + 9000000*lambda_2[0, 188] + 4000000*lambda_2[0, 189] - 12000000*lambda_2[0, 190] - 4000000*lambda_2[0, 191] - 12000000*lambda_2[0, 192] - 4000000*lambda_2[0, 193] - 200*lambda_2[0, 194] + 60000*lambda_2[0, 195] + 30000*lambda_2[0, 196] - 60000*lambda_2[0, 197] - 30000*lambda_2[0, 198] - 12000000*lambda_2[0, 199] - 4000000*lambda_2[0, 200] - 12000000*lambda_2[0, 201] - 4000000*lambda_2[0, 202] - 9000000*lambda_2[0, 203] + 12000000*lambda_2[0, 204] + 9000000*lambda_2[0, 205] + 9000000*lambda_2[0, 206] + 4000000*lambda_2[0, 207] - 9000000*lambda_2[0, 208] == 2*f*B[0, 11] - l*B[0, 10] + 3*B[0, 5]*t[0, 0] + 2*B[0, 10]*t[0, 1]]
	# constraints += [lambda_2[0, 30] + lambda_2[0, 35] - lambda_2[0, 36] - lambda_2[0, 38] - 300*lambda_2[0, 42] + 300*lambda_2[0, 47] + 300*lambda_2[0, 48] - 300*lambda_2[0, 50] + 60000*lambda_2[0, 54] + 60000*lambda_2[0, 59] - 60000*lambda_2[0, 60] - 60000*lambda_2[0, 62] - 10000000*lambda_2[0, 66] + 10000000*lambda_2[0, 71] + 10000000*lambda_2[0, 72] - 10000000*lambda_2[0, 74] - 200*lambda_2[0, 78] - 200*lambda_2[0, 80] - 200*lambda_2[0, 81] - 200*lambda_2[0, 83] + 60000*lambda_2[0, 84] + 30000*lambda_2[0, 85] + 30000*lambda_2[0, 87] - 60000*lambda_2[0, 89] + 60000*lambda_2[0, 90] - 60000*lambda_2[0, 92] - 30000*lambda_2[0, 93] - 30000*lambda_2[0, 95] - 12000000*lambda_2[0, 96] - 4000000*lambda_2[0, 97] - 4000000*lambda_2[0, 99] - 12000000*lambda_2[0, 101] - 12000000*lambda_2[0, 102] - 12000000*lambda_2[0, 104] - 4000000*lambda_2[0, 105] - 4000000*lambda_2[0, 107] - 9000000*lambda_2[0, 108] + 9000000*lambda_2[0, 110] + 9000000*lambda_2[0, 111] - 9000000*lambda_2[0, 113] - lambda_2[0, 114] + lambda_2[0, 116] + 300*lambda_2[0, 118] + 200*lambda_2[0, 119] - 300*lambda_2[0, 120] + 200*lambda_2[0, 121] - 300*lambda_2[0, 123] + 300*lambda_2[0, 125] + 200*lambda_2[0, 126] + 200*lambda_2[0, 128] - 60000*lambda_2[0, 130] - 30000*lambda_2[0, 131] - 60000*lambda_2[0, 132] - 60000*lambda_2[0, 133] + 60000*lambda_2[0, 135] + 60000*lambda_2[0, 137] + 60000*lambda_2[0, 138] + 30000*lambda_2[0, 140] + 10000000*lambda_2[0, 142] + 4000000*lambda_2[0, 143] - 10000000*lambda_2[0, 144] + 12000000*lambda_2[0, 145] - 10000000*lambda_2[0, 147] + 10000000*lambda_2[0, 149] + 12000000*lambda_2[0, 150] + 4000000*lambda_2[0, 152] - 60000*lambda_2[0, 154] + 60000*lambda_2[0, 155] + 60000*lambda_2[0, 156] - 30000*lambda_2[0, 157] - 60000*lambda_2[0, 158] - 30000*lambda_2[0, 159] + 30000*lambda_2[0, 160] - 60000*lambda_2[0, 162] + 60000*lambda_2[0, 164] + 30000*lambda_2[0, 165] + 12000000*lambda_2[0, 166] + 9000000*lambda_2[0, 167] - 10000000*lambda_2[0, 168] - 9000000*lambda_2[0, 169] + 10000000*lambda_2[0, 170] + 12000000*lambda_2[0, 171] + 9000000*lambda_2[0, 172] + 4000000*lambda_2[0, 173] + 10000000*lambda_2[0, 174] + 4000000*lambda_2[0, 175] - 10000000*lambda_2[0, 176] - 9000000*lambda_2[0, 177] - 9000000*lambda_2[0, 178] + 12000000*lambda_2[0, 180] + 12000000*lambda_2[0, 182] + 9000000*lambda_2[0, 183] + 4000000*lambda_2[0, 184] - 9000000*lambda_2[0, 186] + 9000000*lambda_2[0, 188] + 4000000*lambda_2[0, 189] - 12000000*lambda_2[0, 190] - 4000000*lambda_2[0, 191] - 12000000*lambda_2[0, 192] - 4000000*lambda_2[0, 193] - 200*lambda_2[0, 194] + 60000*lambda_2[0, 195] + 30000*lambda_2[0, 196] - 60000*lambda_2[0, 197] - 30000*lambda_2[0, 198] - 12000000*lambda_2[0, 199] - 4000000*lambda_2[0, 200] - 12000000*lambda_2[0, 201] - 4000000*lambda_2[0, 202] - 9000000*lambda_2[0, 203] + 12000000*lambda_2[0, 204] + 9000000*lambda_2[0, 205] + 9000000*lambda_2[0, 206] + 4000000*lambda_2[0, 207] - 9000000*lambda_2[0, 208] >= 2*f*B[0, 11] - l*B[0, 10] + 3*B[0, 5]*t[0, 0] + 2*B[0, 10]*t[0, 1]- objc]
	constraints += [lambda_2[0, 42] - lambda_2[0, 47] - lambda_2[0, 48] + lambda_2[0, 50] - 400*lambda_2[0, 54] - 400*lambda_2[0, 59] + 400*lambda_2[0, 60] + 400*lambda_2[0, 62] + 100000*lambda_2[0, 66] - 100000*lambda_2[0, 71] - 100000*lambda_2[0, 72] + 100000*lambda_2[0, 74] - 200*lambda_2[0, 84] + 200*lambda_2[0, 89] - 200*lambda_2[0, 90] + 200*lambda_2[0, 92] + 80000*lambda_2[0, 96] + 80000*lambda_2[0, 101] + 80000*lambda_2[0, 102] + 80000*lambda_2[0, 104] + 30000*lambda_2[0, 108] - 30000*lambda_2[0, 110] - 30000*lambda_2[0, 111] + 30000*lambda_2[0, 113] - lambda_2[0, 118] + lambda_2[0, 120] + lambda_2[0, 123] - lambda_2[0, 125] + 400*lambda_2[0, 130] + 400*lambda_2[0, 132] + 200*lambda_2[0, 133] - 400*lambda_2[0, 135] - 400*lambda_2[0, 137] - 200*lambda_2[0, 138] - 100000*lambda_2[0, 142] + 100000*lambda_2[0, 144] - 80000*lambda_2[0, 145] + 100000*lambda_2[0, 147] - 100000*lambda_2[0, 149] - 80000*lambda_2[0, 150] + 200*lambda_2[0, 154] - 400*lambda_2[0, 155] - 200*lambda_2[0, 156] + 400*lambda_2[0, 158] + 200*lambda_2[0, 162] - 200*lambda_2[0, 164] - 80000*lambda_2[0, 166] - 30000*lambda_2[0, 167] + 100000*lambda_2[0, 168] + 30000*lambda_2[0, 169] - 100000*lambda_2[0, 170] - 80000*lambda_2[0, 171] - 30000*lambda_2[0, 172] - 100000*lambda_2[0, 174] + 100000*lambda_2[0, 176] + 30000*lambda_2[0, 177] + 30000*lambda_2[0, 178] - 80000*lambda_2[0, 180] - 80000*lambda_2[0, 182] - 30000*lambda_2[0, 183] + 30000*lambda_2[0, 186] - 30000*lambda_2[0, 188] + 80000*lambda_2[0, 190] + 80000*lambda_2[0, 192] - 200*lambda_2[0, 195] + 200*lambda_2[0, 197] + 80000*lambda_2[0, 199] + 80000*lambda_2[0, 201] + 30000*lambda_2[0, 203] - 80000*lambda_2[0, 204] - 30000*lambda_2[0, 205] - 30000*lambda_2[0, 206] + 30000*lambda_2[0, 208] == 2*f*B[0, 14] - l*B[0, 12] + 4*B[0, 7]*t[0, 0] + 3*B[0, 12]*t[0, 1]]
	# constraints += [lambda_2[0, 42] - lambda_2[0, 47] - lambda_2[0, 48] + lambda_2[0, 50] - 400*lambda_2[0, 54] - 400*lambda_2[0, 59] + 400*lambda_2[0, 60] + 400*lambda_2[0, 62] + 100000*lambda_2[0, 66] - 100000*lambda_2[0, 71] - 100000*lambda_2[0, 72] + 100000*lambda_2[0, 74] - 200*lambda_2[0, 84] + 200*lambda_2[0, 89] - 200*lambda_2[0, 90] + 200*lambda_2[0, 92] + 80000*lambda_2[0, 96] + 80000*lambda_2[0, 101] + 80000*lambda_2[0, 102] + 80000*lambda_2[0, 104] + 30000*lambda_2[0, 108] - 30000*lambda_2[0, 110] - 30000*lambda_2[0, 111] + 30000*lambda_2[0, 113] - lambda_2[0, 118] + lambda_2[0, 120] + lambda_2[0, 123] - lambda_2[0, 125] + 400*lambda_2[0, 130] + 400*lambda_2[0, 132] + 200*lambda_2[0, 133] - 400*lambda_2[0, 135] - 400*lambda_2[0, 137] - 200*lambda_2[0, 138] - 100000*lambda_2[0, 142] + 100000*lambda_2[0, 144] - 80000*lambda_2[0, 145] + 100000*lambda_2[0, 147] - 100000*lambda_2[0, 149] - 80000*lambda_2[0, 150] + 200*lambda_2[0, 154] - 400*lambda_2[0, 155] - 200*lambda_2[0, 156] + 400*lambda_2[0, 158] + 200*lambda_2[0, 162] - 200*lambda_2[0, 164] - 80000*lambda_2[0, 166] - 30000*lambda_2[0, 167] + 100000*lambda_2[0, 168] + 30000*lambda_2[0, 169] - 100000*lambda_2[0, 170] - 80000*lambda_2[0, 171] - 30000*lambda_2[0, 172] - 100000*lambda_2[0, 174] + 100000*lambda_2[0, 176] + 30000*lambda_2[0, 177] + 30000*lambda_2[0, 178] - 80000*lambda_2[0, 180] - 80000*lambda_2[0, 182] - 30000*lambda_2[0, 183] + 30000*lambda_2[0, 186] - 30000*lambda_2[0, 188] + 80000*lambda_2[0, 190] + 80000*lambda_2[0, 192] - 200*lambda_2[0, 195] + 200*lambda_2[0, 197] + 80000*lambda_2[0, 199] + 80000*lambda_2[0, 201] + 30000*lambda_2[0, 203] - 80000*lambda_2[0, 204] - 30000*lambda_2[0, 205] - 30000*lambda_2[0, 206] + 30000*lambda_2[0, 208] >= 2*f*B[0, 14] - l*B[0, 12] + 4*B[0, 7]*t[0, 0] + 3*B[0, 12]*t[0, 1]- objc]
	constraints += [lambda_2[0, 54] + lambda_2[0, 59] - lambda_2[0, 60] - lambda_2[0, 62] - 500*lambda_2[0, 66] + 500*lambda_2[0, 71] + 500*lambda_2[0, 72] - 500*lambda_2[0, 74] - 200*lambda_2[0, 96] - 200*lambda_2[0, 101] - 200*lambda_2[0, 102] - 200*lambda_2[0, 104] - lambda_2[0, 130] - lambda_2[0, 132] + lambda_2[0, 135] + lambda_2[0, 137] + 500*lambda_2[0, 142] - 500*lambda_2[0, 144] + 200*lambda_2[0, 145] - 500*lambda_2[0, 147] + 500*lambda_2[0, 149] + 200*lambda_2[0, 150] + lambda_2[0, 155] - lambda_2[0, 158] + 200*lambda_2[0, 166] - 500*lambda_2[0, 168] + 500*lambda_2[0, 170] + 200*lambda_2[0, 171] + 500*lambda_2[0, 174] - 500*lambda_2[0, 176] + 200*lambda_2[0, 180] + 200*lambda_2[0, 182] - 200*lambda_2[0, 190] - 200*lambda_2[0, 192] - 200*lambda_2[0, 199] - 200*lambda_2[0, 201] + 200*lambda_2[0, 204] == 0]
	constraints += [lambda_2[0, 66] - lambda_2[0, 71] - lambda_2[0, 72] + lambda_2[0, 74] - lambda_2[0, 142] + lambda_2[0, 144] + lambda_2[0, 147] - lambda_2[0, 149] + lambda_2[0, 168] - lambda_2[0, 170] - lambda_2[0, 174] + lambda_2[0, 176] == 0]
	constraints += [lambda_2[0, 5] + lambda_2[0, 7] - 300*lambda_2[0, 9] + 300*lambda_2[0, 11] + 60000*lambda_2[0, 13] + 60000*lambda_2[0, 15] - 10000000*lambda_2[0, 17] + 10000000*lambda_2[0, 19] + 1500000000*lambda_2[0, 21] + 1500000000*lambda_2[0, 23] - lambda_2[0, 28] - 100*lambda_2[0, 31] + 100*lambda_2[0, 33] + 300*lambda_2[0, 37] - 100*lambda_2[0, 39] - 300*lambda_2[0, 40] + 100*lambda_2[0, 41] + 30000*lambda_2[0, 43] - 30000*lambda_2[0, 45] - 60000*lambda_2[0, 49] - 30000*lambda_2[0, 51] - 60000*lambda_2[0, 52] + 30000*lambda_2[0, 53] - 6000000*lambda_2[0, 55] + 6000000*lambda_2[0, 57] + 10000000*lambda_2[0, 61] - 6000000*lambda_2[0, 63] - 10000000*lambda_2[0, 64] + 6000000*lambda_2[0, 65] + 1000000000*lambda_2[0, 67] - 1000000000*lambda_2[0, 69] - 1500000000*lambda_2[0, 73] - 1000000000*lambda_2[0, 75] - 1500000000*lambda_2[0, 76] + 1000000000*lambda_2[0, 77] + 10000*lambda_2[0, 78] + 10000*lambda_2[0, 80] + 10000*lambda_2[0, 81] + 60000*lambda_2[0, 82] + 10000*lambda_2[0, 83] - 1000000*lambda_2[0, 84] - 3000000*lambda_2[0, 85] - 3000000*lambda_2[0, 87] + 1000000*lambda_2[0, 89] - 1000000*lambda_2[0, 90] - 10000000*lambda_2[0, 91] + 1000000*lambda_2[0, 92] + 3000000*lambda_2[0, 93] + 10000000*lambda_2[0, 94] + 3000000*lambda_2[0, 95] + 100000000*lambda_2[0, 96] + 600000000*lambda_2[0, 97] + 600000000*lambda_2[0, 99] + 100000000*lambda_2[0, 101] + 100000000*lambda_2[0, 102] + 1500000000*lambda_2[0, 103] + 100000000*lambda_2[0, 104] + 600000000*lambda_2[0, 105] + 1500000000*lambda_2[0, 106] + 600000000*lambda_2[0, 107] + 300000000*lambda_2[0, 108] - 300000000*lambda_2[0, 110] - 300000000*lambda_2[0, 111] - 1500000000*lambda_2[0, 112] + 300000000*lambda_2[0, 113] + 100*lambda_2[0, 115] - 100*lambda_2[0, 117] - 10000*lambda_2[0, 119] - 10000*lambda_2[0, 121] - 30000*lambda_2[0, 122] + 30000*lambda_2[0, 124] - 10000*lambda_2[0, 126] + 30000*lambda_2[0, 127] - 10000*lambda_2[0, 128] - 30000*lambda_2[0, 129] + 3000000*lambda_2[0, 131] + 1000000*lambda_2[0, 133] + 6000000*lambda_2[0, 134] - 6000000*lambda_2[0, 136] - 1000000*lambda_2[0, 138] + 6000000*lambda_2[0, 139] - 3000000*lambda_2[0, 140] - 6000000*lambda_2[0, 141] - 600000000*lambda_2[0, 143] - 100000000*lambda_2[0, 145] - 1000000000*lambda_2[0, 146] + 1000000000*lambda_2[0, 148] - 100000000*lambda_2[0, 150] + 1000000000*lambda_2[0, 151] - 600000000*lambda_2[0, 152] - 1000000000*lambda_2[0, 153] + 1000000*lambda_2[0, 154] - 1000000*lambda_2[0, 156] + 3000000*lambda_2[0, 157] + 3000000*lambda_2[0, 159] - 3000000*lambda_2[0, 160] - 6000000*lambda_2[0, 161] + 1000000*lambda_2[0, 162] + 6000000*lambda_2[0, 163] - 1000000*lambda_2[0, 164] - 3000000*lambda_2[0, 165] - 100000000*lambda_2[0, 166] - 300000000*lambda_2[0, 167] + 300000000*lambda_2[0, 169] - 100000000*lambda_2[0, 171] - 300000000*lambda_2[0, 172] - 600000000*lambda_2[0, 173] - 600000000*lambda_2[0, 175] + 300000000*lambda_2[0, 177] + 300000000*lambda_2[0, 178] + 1000000000*lambda_2[0, 179] - 100000000*lambda_2[0, 180] - 1000000000*lambda_2[0, 181] - 100000000*lambda_2[0, 182] - 300000000*lambda_2[0, 183] - 600000000*lambda_2[0, 184] - 1000000000*lambda_2[0, 185] + 300000000*lambda_2[0, 186] + 1000000000*lambda_2[0, 187] - 300000000*lambda_2[0, 188] - 600000000*lambda_2[0, 189] + 100000000*lambda_2[0, 190] + 600000000*lambda_2[0, 191] + 100000000*lambda_2[0, 192] + 600000000*lambda_2[0, 193] + 10000*lambda_2[0, 194] - 1000000*lambda_2[0, 195] - 3000000*lambda_2[0, 196] + 1000000*lambda_2[0, 197] + 3000000*lambda_2[0, 198] + 100000000*lambda_2[0, 199] + 600000000*lambda_2[0, 200] + 100000000*lambda_2[0, 201] + 600000000*lambda_2[0, 202] + 300000000*lambda_2[0, 203] - 100000000*lambda_2[0, 204] - 300000000*lambda_2[0, 205] - 300000000*lambda_2[0, 206] - 600000000*lambda_2[0, 207] + 300000000*lambda_2[0, 208] == -l*B[0, 4] + B[0, 9]*t[0, 0] - 0.5]
	# constraints += [lambda_2[0, 5] + lambda_2[0, 7] - 300*lambda_2[0, 9] + 300*lambda_2[0, 11] + 60000*lambda_2[0, 13] + 60000*lambda_2[0, 15] - 10000000*lambda_2[0, 17] + 10000000*lambda_2[0, 19] + 1500000000*lambda_2[0, 21] + 1500000000*lambda_2[0, 23] - lambda_2[0, 28] - 100*lambda_2[0, 31] + 100*lambda_2[0, 33] + 300*lambda_2[0, 37] - 100*lambda_2[0, 39] - 300*lambda_2[0, 40] + 100*lambda_2[0, 41] + 30000*lambda_2[0, 43] - 30000*lambda_2[0, 45] - 60000*lambda_2[0, 49] - 30000*lambda_2[0, 51] - 60000*lambda_2[0, 52] + 30000*lambda_2[0, 53] - 6000000*lambda_2[0, 55] + 6000000*lambda_2[0, 57] + 10000000*lambda_2[0, 61] - 6000000*lambda_2[0, 63] - 10000000*lambda_2[0, 64] + 6000000*lambda_2[0, 65] + 1000000000*lambda_2[0, 67] - 1000000000*lambda_2[0, 69] - 1500000000*lambda_2[0, 73] - 1000000000*lambda_2[0, 75] - 1500000000*lambda_2[0, 76] + 1000000000*lambda_2[0, 77] + 10000*lambda_2[0, 78] + 10000*lambda_2[0, 80] + 10000*lambda_2[0, 81] + 60000*lambda_2[0, 82] + 10000*lambda_2[0, 83] - 1000000*lambda_2[0, 84] - 3000000*lambda_2[0, 85] - 3000000*lambda_2[0, 87] + 1000000*lambda_2[0, 89] - 1000000*lambda_2[0, 90] - 10000000*lambda_2[0, 91] + 1000000*lambda_2[0, 92] + 3000000*lambda_2[0, 93] + 10000000*lambda_2[0, 94] + 3000000*lambda_2[0, 95] + 100000000*lambda_2[0, 96] + 600000000*lambda_2[0, 97] + 600000000*lambda_2[0, 99] + 100000000*lambda_2[0, 101] + 100000000*lambda_2[0, 102] + 1500000000*lambda_2[0, 103] + 100000000*lambda_2[0, 104] + 600000000*lambda_2[0, 105] + 1500000000*lambda_2[0, 106] + 600000000*lambda_2[0, 107] + 300000000*lambda_2[0, 108] - 300000000*lambda_2[0, 110] - 300000000*lambda_2[0, 111] - 1500000000*lambda_2[0, 112] + 300000000*lambda_2[0, 113] + 100*lambda_2[0, 115] - 100*lambda_2[0, 117] - 10000*lambda_2[0, 119] - 10000*lambda_2[0, 121] - 30000*lambda_2[0, 122] + 30000*lambda_2[0, 124] - 10000*lambda_2[0, 126] + 30000*lambda_2[0, 127] - 10000*lambda_2[0, 128] - 30000*lambda_2[0, 129] + 3000000*lambda_2[0, 131] + 1000000*lambda_2[0, 133] + 6000000*lambda_2[0, 134] - 6000000*lambda_2[0, 136] - 1000000*lambda_2[0, 138] + 6000000*lambda_2[0, 139] - 3000000*lambda_2[0, 140] - 6000000*lambda_2[0, 141] - 600000000*lambda_2[0, 143] - 100000000*lambda_2[0, 145] - 1000000000*lambda_2[0, 146] + 1000000000*lambda_2[0, 148] - 100000000*lambda_2[0, 150] + 1000000000*lambda_2[0, 151] - 600000000*lambda_2[0, 152] - 1000000000*lambda_2[0, 153] + 1000000*lambda_2[0, 154] - 1000000*lambda_2[0, 156] + 3000000*lambda_2[0, 157] + 3000000*lambda_2[0, 159] - 3000000*lambda_2[0, 160] - 6000000*lambda_2[0, 161] + 1000000*lambda_2[0, 162] + 6000000*lambda_2[0, 163] - 1000000*lambda_2[0, 164] - 3000000*lambda_2[0, 165] - 100000000*lambda_2[0, 166] - 300000000*lambda_2[0, 167] + 300000000*lambda_2[0, 169] - 100000000*lambda_2[0, 171] - 300000000*lambda_2[0, 172] - 600000000*lambda_2[0, 173] - 600000000*lambda_2[0, 175] + 300000000*lambda_2[0, 177] + 300000000*lambda_2[0, 178] + 1000000000*lambda_2[0, 179] - 100000000*lambda_2[0, 180] - 1000000000*lambda_2[0, 181] - 100000000*lambda_2[0, 182] - 300000000*lambda_2[0, 183] - 600000000*lambda_2[0, 184] - 1000000000*lambda_2[0, 185] + 300000000*lambda_2[0, 186] + 1000000000*lambda_2[0, 187] - 300000000*lambda_2[0, 188] - 600000000*lambda_2[0, 189] + 100000000*lambda_2[0, 190] + 600000000*lambda_2[0, 191] + 100000000*lambda_2[0, 192] + 600000000*lambda_2[0, 193] + 10000*lambda_2[0, 194] - 1000000*lambda_2[0, 195] - 3000000*lambda_2[0, 196] + 1000000*lambda_2[0, 197] + 3000000*lambda_2[0, 198] + 100000000*lambda_2[0, 199] + 600000000*lambda_2[0, 200] + 100000000*lambda_2[0, 201] + 600000000*lambda_2[0, 202] + 300000000*lambda_2[0, 203] - 100000000*lambda_2[0, 204] - 300000000*lambda_2[0, 205] - 300000000*lambda_2[0, 206] - 600000000*lambda_2[0, 207] + 300000000*lambda_2[0, 208] >= -l*B[0, 4] + B[0, 9]*t[0, 0] - 0.5- objc]
	constraints += [lambda_2[0, 31] - lambda_2[0, 33] + lambda_2[0, 39] - lambda_2[0, 41] - 300*lambda_2[0, 43] + 300*lambda_2[0, 45] + 300*lambda_2[0, 51] - 300*lambda_2[0, 53] + 60000*lambda_2[0, 55] - 60000*lambda_2[0, 57] + 60000*lambda_2[0, 63] - 60000*lambda_2[0, 65] - 10000000*lambda_2[0, 67] + 10000000*lambda_2[0, 69] + 10000000*lambda_2[0, 75] - 10000000*lambda_2[0, 77] - 200*lambda_2[0, 78] - 200*lambda_2[0, 80] - 200*lambda_2[0, 81] - 200*lambda_2[0, 83] + 30000*lambda_2[0, 84] + 60000*lambda_2[0, 85] + 60000*lambda_2[0, 87] - 30000*lambda_2[0, 89] + 30000*lambda_2[0, 90] - 30000*lambda_2[0, 92] - 60000*lambda_2[0, 93] - 60000*lambda_2[0, 95] - 4000000*lambda_2[0, 96] - 12000000*lambda_2[0, 97] - 12000000*lambda_2[0, 99] - 4000000*lambda_2[0, 101] - 4000000*lambda_2[0, 102] - 4000000*lambda_2[0, 104] - 12000000*lambda_2[0, 105] - 12000000*lambda_2[0, 107] - 9000000*lambda_2[0, 108] + 9000000*lambda_2[0, 110] + 9000000*lambda_2[0, 111] - 9000000*lambda_2[0, 113] - lambda_2[0, 115] + lambda_2[0, 117] + 200*lambda_2[0, 119] + 200*lambda_2[0, 121] + 300*lambda_2[0, 122] - 300*lambda_2[0, 124] + 200*lambda_2[0, 126] - 300*lambda_2[0, 127] + 200*lambda_2[0, 128] + 300*lambda_2[0, 129] - 60000*lambda_2[0, 131] - 30000*lambda_2[0, 133] - 60000*lambda_2[0, 134] + 60000*lambda_2[0, 136] + 30000*lambda_2[0, 138] - 60000*lambda_2[0, 139] + 60000*lambda_2[0, 140] + 60000*lambda_2[0, 141] + 12000000*lambda_2[0, 143] + 4000000*lambda_2[0, 145] + 10000000*lambda_2[0, 146] - 10000000*lambda_2[0, 148] + 4000000*lambda_2[0, 150] - 10000000*lambda_2[0, 151] + 12000000*lambda_2[0, 152] + 10000000*lambda_2[0, 153] - 30000*lambda_2[0, 154] + 30000*lambda_2[0, 156] - 60000*lambda_2[0, 157] - 60000*lambda_2[0, 159] + 60000*lambda_2[0, 160] + 60000*lambda_2[0, 161] - 30000*lambda_2[0, 162] - 60000*lambda_2[0, 163] + 30000*lambda_2[0, 164] + 60000*lambda_2[0, 165] + 4000000*lambda_2[0, 166] + 9000000*lambda_2[0, 167] - 9000000*lambda_2[0, 169] + 4000000*lambda_2[0, 171] + 9000000*lambda_2[0, 172] + 12000000*lambda_2[0, 173] + 12000000*lambda_2[0, 175] - 9000000*lambda_2[0, 177] - 9000000*lambda_2[0, 178] - 10000000*lambda_2[0, 179] + 4000000*lambda_2[0, 180] + 10000000*lambda_2[0, 181] + 4000000*lambda_2[0, 182] + 9000000*lambda_2[0, 183] + 12000000*lambda_2[0, 184] + 10000000*lambda_2[0, 185] - 9000000*lambda_2[0, 186] - 10000000*lambda_2[0, 187] + 9000000*lambda_2[0, 188] + 12000000*lambda_2[0, 189] - 4000000*lambda_2[0, 190] - 12000000*lambda_2[0, 191] - 4000000*lambda_2[0, 192] - 12000000*lambda_2[0, 193] - 200*lambda_2[0, 194] + 30000*lambda_2[0, 195] + 60000*lambda_2[0, 196] - 30000*lambda_2[0, 197] - 60000*lambda_2[0, 198] - 4000000*lambda_2[0, 199] - 12000000*lambda_2[0, 200] - 4000000*lambda_2[0, 201] - 12000000*lambda_2[0, 202] - 9000000*lambda_2[0, 203] + 4000000*lambda_2[0, 204] + 9000000*lambda_2[0, 205] + 9000000*lambda_2[0, 206] + 12000000*lambda_2[0, 207] - 9000000*lambda_2[0, 208] == 3*f*B[0, 6] - l*B[0, 11] + 2*B[0, 10]*t[0, 0] + B[0, 11]*t[0, 1]]
	# constraints += [lambda_2[0, 31] - lambda_2[0, 33] + lambda_2[0, 39] - lambda_2[0, 41] - 300*lambda_2[0, 43] + 300*lambda_2[0, 45] + 300*lambda_2[0, 51] - 300*lambda_2[0, 53] + 60000*lambda_2[0, 55] - 60000*lambda_2[0, 57] + 60000*lambda_2[0, 63] - 60000*lambda_2[0, 65] - 10000000*lambda_2[0, 67] + 10000000*lambda_2[0, 69] + 10000000*lambda_2[0, 75] - 10000000*lambda_2[0, 77] - 200*lambda_2[0, 78] - 200*lambda_2[0, 80] - 200*lambda_2[0, 81] - 200*lambda_2[0, 83] + 30000*lambda_2[0, 84] + 60000*lambda_2[0, 85] + 60000*lambda_2[0, 87] - 30000*lambda_2[0, 89] + 30000*lambda_2[0, 90] - 30000*lambda_2[0, 92] - 60000*lambda_2[0, 93] - 60000*lambda_2[0, 95] - 4000000*lambda_2[0, 96] - 12000000*lambda_2[0, 97] - 12000000*lambda_2[0, 99] - 4000000*lambda_2[0, 101] - 4000000*lambda_2[0, 102] - 4000000*lambda_2[0, 104] - 12000000*lambda_2[0, 105] - 12000000*lambda_2[0, 107] - 9000000*lambda_2[0, 108] + 9000000*lambda_2[0, 110] + 9000000*lambda_2[0, 111] - 9000000*lambda_2[0, 113] - lambda_2[0, 115] + lambda_2[0, 117] + 200*lambda_2[0, 119] + 200*lambda_2[0, 121] + 300*lambda_2[0, 122] - 300*lambda_2[0, 124] + 200*lambda_2[0, 126] - 300*lambda_2[0, 127] + 200*lambda_2[0, 128] + 300*lambda_2[0, 129] - 60000*lambda_2[0, 131] - 30000*lambda_2[0, 133] - 60000*lambda_2[0, 134] + 60000*lambda_2[0, 136] + 30000*lambda_2[0, 138] - 60000*lambda_2[0, 139] + 60000*lambda_2[0, 140] + 60000*lambda_2[0, 141] + 12000000*lambda_2[0, 143] + 4000000*lambda_2[0, 145] + 10000000*lambda_2[0, 146] - 10000000*lambda_2[0, 148] + 4000000*lambda_2[0, 150] - 10000000*lambda_2[0, 151] + 12000000*lambda_2[0, 152] + 10000000*lambda_2[0, 153] - 30000*lambda_2[0, 154] + 30000*lambda_2[0, 156] - 60000*lambda_2[0, 157] - 60000*lambda_2[0, 159] + 60000*lambda_2[0, 160] + 60000*lambda_2[0, 161] - 30000*lambda_2[0, 162] - 60000*lambda_2[0, 163] + 30000*lambda_2[0, 164] + 60000*lambda_2[0, 165] + 4000000*lambda_2[0, 166] + 9000000*lambda_2[0, 167] - 9000000*lambda_2[0, 169] + 4000000*lambda_2[0, 171] + 9000000*lambda_2[0, 172] + 12000000*lambda_2[0, 173] + 12000000*lambda_2[0, 175] - 9000000*lambda_2[0, 177] - 9000000*lambda_2[0, 178] - 10000000*lambda_2[0, 179] + 4000000*lambda_2[0, 180] + 10000000*lambda_2[0, 181] + 4000000*lambda_2[0, 182] + 9000000*lambda_2[0, 183] + 12000000*lambda_2[0, 184] + 10000000*lambda_2[0, 185] - 9000000*lambda_2[0, 186] - 10000000*lambda_2[0, 187] + 9000000*lambda_2[0, 188] + 12000000*lambda_2[0, 189] - 4000000*lambda_2[0, 190] - 12000000*lambda_2[0, 191] - 4000000*lambda_2[0, 192] - 12000000*lambda_2[0, 193] - 200*lambda_2[0, 194] + 30000*lambda_2[0, 195] + 60000*lambda_2[0, 196] - 30000*lambda_2[0, 197] - 60000*lambda_2[0, 198] - 4000000*lambda_2[0, 199] - 12000000*lambda_2[0, 200] - 4000000*lambda_2[0, 201] - 12000000*lambda_2[0, 202] - 9000000*lambda_2[0, 203] + 4000000*lambda_2[0, 204] + 9000000*lambda_2[0, 205] + 9000000*lambda_2[0, 206] + 12000000*lambda_2[0, 207] - 9000000*lambda_2[0, 208] >= 3*f*B[0, 6] - l*B[0, 11] + 2*B[0, 10]*t[0, 0] + B[0, 11]*t[0, 1]- objc]
	constraints += [lambda_2[0, 78] + lambda_2[0, 80] + lambda_2[0, 81] + lambda_2[0, 83] - 300*lambda_2[0, 84] - 300*lambda_2[0, 85] - 300*lambda_2[0, 87] + 300*lambda_2[0, 89] - 300*lambda_2[0, 90] + 300*lambda_2[0, 92] + 300*lambda_2[0, 93] + 300*lambda_2[0, 95] + 60000*lambda_2[0, 96] + 60000*lambda_2[0, 97] + 60000*lambda_2[0, 99] + 60000*lambda_2[0, 101] + 60000*lambda_2[0, 102] + 60000*lambda_2[0, 104] + 60000*lambda_2[0, 105] + 60000*lambda_2[0, 107] + 90000*lambda_2[0, 108] - 90000*lambda_2[0, 110] - 90000*lambda_2[0, 111] + 90000*lambda_2[0, 113] - lambda_2[0, 119] - lambda_2[0, 121] - lambda_2[0, 126] - lambda_2[0, 128] + 300*lambda_2[0, 131] + 300*lambda_2[0, 133] - 300*lambda_2[0, 138] - 300*lambda_2[0, 140] - 60000*lambda_2[0, 143] - 60000*lambda_2[0, 145] - 60000*lambda_2[0, 150] - 60000*lambda_2[0, 152] + 300*lambda_2[0, 154] - 300*lambda_2[0, 156] + 300*lambda_2[0, 157] + 300*lambda_2[0, 159] - 300*lambda_2[0, 160] + 300*lambda_2[0, 162] - 300*lambda_2[0, 164] - 300*lambda_2[0, 165] - 60000*lambda_2[0, 166] - 90000*lambda_2[0, 167] + 90000*lambda_2[0, 169] - 60000*lambda_2[0, 171] - 90000*lambda_2[0, 172] - 60000*lambda_2[0, 173] - 60000*lambda_2[0, 175] + 90000*lambda_2[0, 177] + 90000*lambda_2[0, 178] - 60000*lambda_2[0, 180] - 60000*lambda_2[0, 182] - 90000*lambda_2[0, 183] - 60000*lambda_2[0, 184] + 90000*lambda_2[0, 186] - 90000*lambda_2[0, 188] - 60000*lambda_2[0, 189] + 60000*lambda_2[0, 190] + 60000*lambda_2[0, 191] + 60000*lambda_2[0, 192] + 60000*lambda_2[0, 193] + lambda_2[0, 194] - 300*lambda_2[0, 195] - 300*lambda_2[0, 196] + 300*lambda_2[0, 197] + 300*lambda_2[0, 198] + 60000*lambda_2[0, 199] + 60000*lambda_2[0, 200] + 60000*lambda_2[0, 201] + 60000*lambda_2[0, 202] + 90000*lambda_2[0, 203] - 60000*lambda_2[0, 204] - 90000*lambda_2[0, 205] - 90000*lambda_2[0, 206] - 60000*lambda_2[0, 207] + 90000*lambda_2[0, 208] == 3*f*B[0, 13] - l*B[0, 14] + 3*B[0, 12]*t[0, 0] + 2*B[0, 14]*t[0, 1]]
	# constraints += [lambda_2[0, 78] + lambda_2[0, 80] + lambda_2[0, 81] + lambda_2[0, 83] - 300*lambda_2[0, 84] - 300*lambda_2[0, 85] - 300*lambda_2[0, 87] + 300*lambda_2[0, 89] - 300*lambda_2[0, 90] + 300*lambda_2[0, 92] + 300*lambda_2[0, 93] + 300*lambda_2[0, 95] + 60000*lambda_2[0, 96] + 60000*lambda_2[0, 97] + 60000*lambda_2[0, 99] + 60000*lambda_2[0, 101] + 60000*lambda_2[0, 102] + 60000*lambda_2[0, 104] + 60000*lambda_2[0, 105] + 60000*lambda_2[0, 107] + 90000*lambda_2[0, 108] - 90000*lambda_2[0, 110] - 90000*lambda_2[0, 111] + 90000*lambda_2[0, 113] - lambda_2[0, 119] - lambda_2[0, 121] - lambda_2[0, 126] - lambda_2[0, 128] + 300*lambda_2[0, 131] + 300*lambda_2[0, 133] - 300*lambda_2[0, 138] - 300*lambda_2[0, 140] - 60000*lambda_2[0, 143] - 60000*lambda_2[0, 145] - 60000*lambda_2[0, 150] - 60000*lambda_2[0, 152] + 300*lambda_2[0, 154] - 300*lambda_2[0, 156] + 300*lambda_2[0, 157] + 300*lambda_2[0, 159] - 300*lambda_2[0, 160] + 300*lambda_2[0, 162] - 300*lambda_2[0, 164] - 300*lambda_2[0, 165] - 60000*lambda_2[0, 166] - 90000*lambda_2[0, 167] + 90000*lambda_2[0, 169] - 60000*lambda_2[0, 171] - 90000*lambda_2[0, 172] - 60000*lambda_2[0, 173] - 60000*lambda_2[0, 175] + 90000*lambda_2[0, 177] + 90000*lambda_2[0, 178] - 60000*lambda_2[0, 180] - 60000*lambda_2[0, 182] - 90000*lambda_2[0, 183] - 60000*lambda_2[0, 184] + 90000*lambda_2[0, 186] - 90000*lambda_2[0, 188] - 60000*lambda_2[0, 189] + 60000*lambda_2[0, 190] + 60000*lambda_2[0, 191] + 60000*lambda_2[0, 192] + 60000*lambda_2[0, 193] + lambda_2[0, 194] - 300*lambda_2[0, 195] - 300*lambda_2[0, 196] + 300*lambda_2[0, 197] + 300*lambda_2[0, 198] + 60000*lambda_2[0, 199] + 60000*lambda_2[0, 200] + 60000*lambda_2[0, 201] + 60000*lambda_2[0, 202] + 90000*lambda_2[0, 203] - 60000*lambda_2[0, 204] - 90000*lambda_2[0, 205] - 90000*lambda_2[0, 206] - 60000*lambda_2[0, 207] + 90000*lambda_2[0, 208] >= 3*f*B[0, 13] - l*B[0, 14] + 3*B[0, 12]*t[0, 0] + 2*B[0, 14]*t[0, 1]- objc]
	constraints += [lambda_2[0, 84] - lambda_2[0, 89] + lambda_2[0, 90] - lambda_2[0, 92] - 400*lambda_2[0, 96] - 400*lambda_2[0, 101] - 400*lambda_2[0, 102] - 400*lambda_2[0, 104] - 300*lambda_2[0, 108] + 300*lambda_2[0, 110] + 300*lambda_2[0, 111] - 300*lambda_2[0, 113] - lambda_2[0, 133] + lambda_2[0, 138] + 400*lambda_2[0, 145] + 400*lambda_2[0, 150] - lambda_2[0, 154] + lambda_2[0, 156] - lambda_2[0, 162] + lambda_2[0, 164] + 400*lambda_2[0, 166] + 300*lambda_2[0, 167] - 300*lambda_2[0, 169] + 400*lambda_2[0, 171] + 300*lambda_2[0, 172] - 300*lambda_2[0, 177] - 300*lambda_2[0, 178] + 400*lambda_2[0, 180] + 400*lambda_2[0, 182] + 300*lambda_2[0, 183] - 300*lambda_2[0, 186] + 300*lambda_2[0, 188] - 400*lambda_2[0, 190] - 400*lambda_2[0, 192] + lambda_2[0, 195] - lambda_2[0, 197] - 400*lambda_2[0, 199] - 400*lambda_2[0, 201] - 300*lambda_2[0, 203] + 400*lambda_2[0, 204] + 300*lambda_2[0, 205] + 300*lambda_2[0, 206] - 300*lambda_2[0, 208] == 0]
	constraints += [lambda_2[0, 96] + lambda_2[0, 101] + lambda_2[0, 102] + lambda_2[0, 104] - lambda_2[0, 145] - lambda_2[0, 150] - lambda_2[0, 166] - lambda_2[0, 171] - lambda_2[0, 180] - lambda_2[0, 182] + lambda_2[0, 190] + lambda_2[0, 192] + lambda_2[0, 199] + lambda_2[0, 201] - lambda_2[0, 204] == 0]
	constraints += [lambda_2[0, 9] - lambda_2[0, 11] - 400*lambda_2[0, 13] - 400*lambda_2[0, 15] + 100000*lambda_2[0, 17] - 100000*lambda_2[0, 19] - 20000000*lambda_2[0, 21] - 20000000*lambda_2[0, 23] - lambda_2[0, 37] + lambda_2[0, 40] - 100*lambda_2[0, 43] + 100*lambda_2[0, 45] + 400*lambda_2[0, 49] + 100*lambda_2[0, 51] + 400*lambda_2[0, 52] - 100*lambda_2[0, 53] + 40000*lambda_2[0, 55] - 40000*lambda_2[0, 57] - 100000*lambda_2[0, 61] + 40000*lambda_2[0, 63] + 100000*lambda_2[0, 64] - 40000*lambda_2[0, 65] - 10000000*lambda_2[0, 67] + 10000000*lambda_2[0, 69] + 20000000*lambda_2[0, 73] + 10000000*lambda_2[0, 75] + 20000000*lambda_2[0, 76] - 10000000*lambda_2[0, 77] - 400*lambda_2[0, 82] + 10000*lambda_2[0, 85] + 10000*lambda_2[0, 87] + 100000*lambda_2[0, 91] - 10000*lambda_2[0, 93] - 100000*lambda_2[0, 94] - 10000*lambda_2[0, 95] - 4000000*lambda_2[0, 97] - 4000000*lambda_2[0, 99] - 20000000*lambda_2[0, 103] - 4000000*lambda_2[0, 105] - 20000000*lambda_2[0, 106] - 4000000*lambda_2[0, 107] - 1000000*lambda_2[0, 108] + 1000000*lambda_2[0, 110] + 1000000*lambda_2[0, 111] + 20000000*lambda_2[0, 112] - 1000000*lambda_2[0, 113] + 100*lambda_2[0, 122] - 100*lambda_2[0, 124] - 100*lambda_2[0, 127] + 100*lambda_2[0, 129] - 10000*lambda_2[0, 131] - 40000*lambda_2[0, 134] + 40000*lambda_2[0, 136] - 40000*lambda_2[0, 139] + 10000*lambda_2[0, 140] + 40000*lambda_2[0, 141] + 4000000*lambda_2[0, 143] + 10000000*lambda_2[0, 146] - 10000000*lambda_2[0, 148] - 10000000*lambda_2[0, 151] + 4000000*lambda_2[0, 152] + 10000000*lambda_2[0, 153] - 10000*lambda_2[0, 157] - 10000*lambda_2[0, 159] + 10000*lambda_2[0, 160] + 40000*lambda_2[0, 161] - 40000*lambda_2[0, 163] + 10000*lambda_2[0, 165] + 1000000*lambda_2[0, 167] - 1000000*lambda_2[0, 169] + 1000000*lambda_2[0, 172] + 4000000*lambda_2[0, 173] + 4000000*lambda_2[0, 175] - 1000000*lambda_2[0, 177] - 1000000*lambda_2[0, 178] - 10000000*lambda_2[0, 179] + 10000000*lambda_2[0, 181] + 1000000*lambda_2[0, 183] + 4000000*lambda_2[0, 184] + 10000000*lambda_2[0, 185] - 1000000*lambda_2[0, 186] - 10000000*lambda_2[0, 187] + 1000000*lambda_2[0, 188] + 4000000*lambda_2[0, 189] - 4000000*lambda_2[0, 191] - 4000000*lambda_2[0, 193] + 10000*lambda_2[0, 196] - 10000*lambda_2[0, 198] - 4000000*lambda_2[0, 200] - 4000000*lambda_2[0, 202] - 1000000*lambda_2[0, 203] + 1000000*lambda_2[0, 205] + 1000000*lambda_2[0, 206] + 4000000*lambda_2[0, 207] - 1000000*lambda_2[0, 208] == g*B[0, 1] - l*B[0, 6] + B[0, 11]*t[0, 0]]
	# constraints += [lambda_2[0, 9] - lambda_2[0, 11] - 400*lambda_2[0, 13] - 400*lambda_2[0, 15] + 100000*lambda_2[0, 17] - 100000*lambda_2[0, 19] - 20000000*lambda_2[0, 21] - 20000000*lambda_2[0, 23] - lambda_2[0, 37] + lambda_2[0, 40] - 100*lambda_2[0, 43] + 100*lambda_2[0, 45] + 400*lambda_2[0, 49] + 100*lambda_2[0, 51] + 400*lambda_2[0, 52] - 100*lambda_2[0, 53] + 40000*lambda_2[0, 55] - 40000*lambda_2[0, 57] - 100000*lambda_2[0, 61] + 40000*lambda_2[0, 63] + 100000*lambda_2[0, 64] - 40000*lambda_2[0, 65] - 10000000*lambda_2[0, 67] + 10000000*lambda_2[0, 69] + 20000000*lambda_2[0, 73] + 10000000*lambda_2[0, 75] + 20000000*lambda_2[0, 76] - 10000000*lambda_2[0, 77] - 400*lambda_2[0, 82] + 10000*lambda_2[0, 85] + 10000*lambda_2[0, 87] + 100000*lambda_2[0, 91] - 10000*lambda_2[0, 93] - 100000*lambda_2[0, 94] - 10000*lambda_2[0, 95] - 4000000*lambda_2[0, 97] - 4000000*lambda_2[0, 99] - 20000000*lambda_2[0, 103] - 4000000*lambda_2[0, 105] - 20000000*lambda_2[0, 106] - 4000000*lambda_2[0, 107] - 1000000*lambda_2[0, 108] + 1000000*lambda_2[0, 110] + 1000000*lambda_2[0, 111] + 20000000*lambda_2[0, 112] - 1000000*lambda_2[0, 113] + 100*lambda_2[0, 122] - 100*lambda_2[0, 124] - 100*lambda_2[0, 127] + 100*lambda_2[0, 129] - 10000*lambda_2[0, 131] - 40000*lambda_2[0, 134] + 40000*lambda_2[0, 136] - 40000*lambda_2[0, 139] + 10000*lambda_2[0, 140] + 40000*lambda_2[0, 141] + 4000000*lambda_2[0, 143] + 10000000*lambda_2[0, 146] - 10000000*lambda_2[0, 148] - 10000000*lambda_2[0, 151] + 4000000*lambda_2[0, 152] + 10000000*lambda_2[0, 153] - 10000*lambda_2[0, 157] - 10000*lambda_2[0, 159] + 10000*lambda_2[0, 160] + 40000*lambda_2[0, 161] - 40000*lambda_2[0, 163] + 10000*lambda_2[0, 165] + 1000000*lambda_2[0, 167] - 1000000*lambda_2[0, 169] + 1000000*lambda_2[0, 172] + 4000000*lambda_2[0, 173] + 4000000*lambda_2[0, 175] - 1000000*lambda_2[0, 177] - 1000000*lambda_2[0, 178] - 10000000*lambda_2[0, 179] + 10000000*lambda_2[0, 181] + 1000000*lambda_2[0, 183] + 4000000*lambda_2[0, 184] + 10000000*lambda_2[0, 185] - 1000000*lambda_2[0, 186] - 10000000*lambda_2[0, 187] + 1000000*lambda_2[0, 188] + 4000000*lambda_2[0, 189] - 4000000*lambda_2[0, 191] - 4000000*lambda_2[0, 193] + 10000*lambda_2[0, 196] - 10000*lambda_2[0, 198] - 4000000*lambda_2[0, 200] - 4000000*lambda_2[0, 202] - 1000000*lambda_2[0, 203] + 1000000*lambda_2[0, 205] + 1000000*lambda_2[0, 206] + 4000000*lambda_2[0, 207] - 1000000*lambda_2[0, 208] >= g*B[0, 1] - l*B[0, 6] + B[0, 11]*t[0, 0]- objc]
	constraints += [lambda_2[0, 43] - lambda_2[0, 45] - lambda_2[0, 51] + lambda_2[0, 53] - 400*lambda_2[0, 55] + 400*lambda_2[0, 57] - 400*lambda_2[0, 63] + 400*lambda_2[0, 65] + 100000*lambda_2[0, 67] - 100000*lambda_2[0, 69] - 100000*lambda_2[0, 75] + 100000*lambda_2[0, 77] - 200*lambda_2[0, 85] - 200*lambda_2[0, 87] + 200*lambda_2[0, 93] + 200*lambda_2[0, 95] + 80000*lambda_2[0, 97] + 80000*lambda_2[0, 99] + 80000*lambda_2[0, 105] + 80000*lambda_2[0, 107] + 30000*lambda_2[0, 108] - 30000*lambda_2[0, 110] - 30000*lambda_2[0, 111] + 30000*lambda_2[0, 113] - lambda_2[0, 122] + lambda_2[0, 124] + lambda_2[0, 127] - lambda_2[0, 129] + 200*lambda_2[0, 131] + 400*lambda_2[0, 134] - 400*lambda_2[0, 136] + 400*lambda_2[0, 139] - 200*lambda_2[0, 140] - 400*lambda_2[0, 141] - 80000*lambda_2[0, 143] - 100000*lambda_2[0, 146] + 100000*lambda_2[0, 148] + 100000*lambda_2[0, 151] - 80000*lambda_2[0, 152] - 100000*lambda_2[0, 153] + 200*lambda_2[0, 157] + 200*lambda_2[0, 159] - 200*lambda_2[0, 160] - 400*lambda_2[0, 161] + 400*lambda_2[0, 163] - 200*lambda_2[0, 165] - 30000*lambda_2[0, 167] + 30000*lambda_2[0, 169] - 30000*lambda_2[0, 172] - 80000*lambda_2[0, 173] - 80000*lambda_2[0, 175] + 30000*lambda_2[0, 177] + 30000*lambda_2[0, 178] + 100000*lambda_2[0, 179] - 100000*lambda_2[0, 181] - 30000*lambda_2[0, 183] - 80000*lambda_2[0, 184] - 100000*lambda_2[0, 185] + 30000*lambda_2[0, 186] + 100000*lambda_2[0, 187] - 30000*lambda_2[0, 188] - 80000*lambda_2[0, 189] + 80000*lambda_2[0, 191] + 80000*lambda_2[0, 193] - 200*lambda_2[0, 196] + 200*lambda_2[0, 198] + 80000*lambda_2[0, 200] + 80000*lambda_2[0, 202] + 30000*lambda_2[0, 203] - 30000*lambda_2[0, 205] - 30000*lambda_2[0, 206] - 80000*lambda_2[0, 207] + 30000*lambda_2[0, 208] == 4*f*B[0, 8] + 2*g*B[0, 3] - l*B[0, 13] + B[0, 13]*t[0, 1] + 2*B[0, 14]*t[0, 0]]
	# constraints += [lambda_2[0, 43] - lambda_2[0, 45] - lambda_2[0, 51] + lambda_2[0, 53] - 400*lambda_2[0, 55] + 400*lambda_2[0, 57] - 400*lambda_2[0, 63] + 400*lambda_2[0, 65] + 100000*lambda_2[0, 67] - 100000*lambda_2[0, 69] - 100000*lambda_2[0, 75] + 100000*lambda_2[0, 77] - 200*lambda_2[0, 85] - 200*lambda_2[0, 87] + 200*lambda_2[0, 93] + 200*lambda_2[0, 95] + 80000*lambda_2[0, 97] + 80000*lambda_2[0, 99] + 80000*lambda_2[0, 105] + 80000*lambda_2[0, 107] + 30000*lambda_2[0, 108] - 30000*lambda_2[0, 110] - 30000*lambda_2[0, 111] + 30000*lambda_2[0, 113] - lambda_2[0, 122] + lambda_2[0, 124] + lambda_2[0, 127] - lambda_2[0, 129] + 200*lambda_2[0, 131] + 400*lambda_2[0, 134] - 400*lambda_2[0, 136] + 400*lambda_2[0, 139] - 200*lambda_2[0, 140] - 400*lambda_2[0, 141] - 80000*lambda_2[0, 143] - 100000*lambda_2[0, 146] + 100000*lambda_2[0, 148] + 100000*lambda_2[0, 151] - 80000*lambda_2[0, 152] - 100000*lambda_2[0, 153] + 200*lambda_2[0, 157] + 200*lambda_2[0, 159] - 200*lambda_2[0, 160] - 400*lambda_2[0, 161] + 400*lambda_2[0, 163] - 200*lambda_2[0, 165] - 30000*lambda_2[0, 167] + 30000*lambda_2[0, 169] - 30000*lambda_2[0, 172] - 80000*lambda_2[0, 173] - 80000*lambda_2[0, 175] + 30000*lambda_2[0, 177] + 30000*lambda_2[0, 178] + 100000*lambda_2[0, 179] - 100000*lambda_2[0, 181] - 30000*lambda_2[0, 183] - 80000*lambda_2[0, 184] - 100000*lambda_2[0, 185] + 30000*lambda_2[0, 186] + 100000*lambda_2[0, 187] - 30000*lambda_2[0, 188] - 80000*lambda_2[0, 189] + 80000*lambda_2[0, 191] + 80000*lambda_2[0, 193] - 200*lambda_2[0, 196] + 200*lambda_2[0, 198] + 80000*lambda_2[0, 200] + 80000*lambda_2[0, 202] + 30000*lambda_2[0, 203] - 30000*lambda_2[0, 205] - 30000*lambda_2[0, 206] - 80000*lambda_2[0, 207] + 30000*lambda_2[0, 208] >= 4*f*B[0, 8] + 2*g*B[0, 3] - l*B[0, 13] + B[0, 13]*t[0, 1] + 2*B[0, 14]*t[0, 0]- objc]
	constraints += [lambda_2[0, 85] + lambda_2[0, 87] - lambda_2[0, 93] - lambda_2[0, 95] - 400*lambda_2[0, 97] - 400*lambda_2[0, 99] - 400*lambda_2[0, 105] - 400*lambda_2[0, 107] - 300*lambda_2[0, 108] + 300*lambda_2[0, 110] + 300*lambda_2[0, 111] - 300*lambda_2[0, 113] - lambda_2[0, 131] + lambda_2[0, 140] + 400*lambda_2[0, 143] + 400*lambda_2[0, 152] - lambda_2[0, 157] - lambda_2[0, 159] + lambda_2[0, 160] + lambda_2[0, 165] + 300*lambda_2[0, 167] - 300*lambda_2[0, 169] + 300*lambda_2[0, 172] + 400*lambda_2[0, 173] + 400*lambda_2[0, 175] - 300*lambda_2[0, 177] - 300*lambda_2[0, 178] + 300*lambda_2[0, 183] + 400*lambda_2[0, 184] - 300*lambda_2[0, 186] + 300*lambda_2[0, 188] + 400*lambda_2[0, 189] - 400*lambda_2[0, 191] - 400*lambda_2[0, 193] + lambda_2[0, 196] - lambda_2[0, 198] - 400*lambda_2[0, 200] - 400*lambda_2[0, 202] - 300*lambda_2[0, 203] + 300*lambda_2[0, 205] + 300*lambda_2[0, 206] + 400*lambda_2[0, 207] - 300*lambda_2[0, 208] == 3*g*B[0, 5]]
	# constraints += [lambda_2[0, 85] + lambda_2[0, 87] - lambda_2[0, 93] - lambda_2[0, 95] - 400*lambda_2[0, 97] - 400*lambda_2[0, 99] - 400*lambda_2[0, 105] - 400*lambda_2[0, 107] - 300*lambda_2[0, 108] + 300*lambda_2[0, 110] + 300*lambda_2[0, 111] - 300*lambda_2[0, 113] - lambda_2[0, 131] + lambda_2[0, 140] + 400*lambda_2[0, 143] + 400*lambda_2[0, 152] - lambda_2[0, 157] - lambda_2[0, 159] + lambda_2[0, 160] + lambda_2[0, 165] + 300*lambda_2[0, 167] - 300*lambda_2[0, 169] + 300*lambda_2[0, 172] + 400*lambda_2[0, 173] + 400*lambda_2[0, 175] - 300*lambda_2[0, 177] - 300*lambda_2[0, 178] + 300*lambda_2[0, 183] + 400*lambda_2[0, 184] - 300*lambda_2[0, 186] + 300*lambda_2[0, 188] + 400*lambda_2[0, 189] - 400*lambda_2[0, 191] - 400*lambda_2[0, 193] + lambda_2[0, 196] - lambda_2[0, 198] - 400*lambda_2[0, 200] - 400*lambda_2[0, 202] - 300*lambda_2[0, 203] + 300*lambda_2[0, 205] + 300*lambda_2[0, 206] + 400*lambda_2[0, 207] - 300*lambda_2[0, 208] >= 3*g*B[0, 5]- objc]
	constraints += [lambda_2[0, 108] - lambda_2[0, 110] - lambda_2[0, 111] + lambda_2[0, 113] - lambda_2[0, 167] + lambda_2[0, 169] - lambda_2[0, 172] + lambda_2[0, 177] + lambda_2[0, 178] - lambda_2[0, 183] + lambda_2[0, 186] - lambda_2[0, 188] + lambda_2[0, 203] - lambda_2[0, 205] - lambda_2[0, 206] + lambda_2[0, 208] <= 4*g*B[0, 7]+ objc]
	constraints += [lambda_2[0, 108] - lambda_2[0, 110] - lambda_2[0, 111] + lambda_2[0, 113] - lambda_2[0, 167] + lambda_2[0, 169] - lambda_2[0, 172] + lambda_2[0, 177] + lambda_2[0, 178] - lambda_2[0, 183] + lambda_2[0, 186] - lambda_2[0, 188] + lambda_2[0, 203] - lambda_2[0, 205] - lambda_2[0, 206] + lambda_2[0, 208] >= 4*g*B[0, 7]- objc]
	constraints += [lambda_2[0, 13] + lambda_2[0, 15] - 500*lambda_2[0, 17] + 500*lambda_2[0, 19] + 150000*lambda_2[0, 21] + 150000*lambda_2[0, 23] - lambda_2[0, 49] - lambda_2[0, 52] - 100*lambda_2[0, 55] + 100*lambda_2[0, 57] + 500*lambda_2[0, 61] - 100*lambda_2[0, 63] - 500*lambda_2[0, 64] + 100*lambda_2[0, 65] + 50000*lambda_2[0, 67] - 50000*lambda_2[0, 69] - 150000*lambda_2[0, 73] - 50000*lambda_2[0, 75] - 150000*lambda_2[0, 76] + 50000*lambda_2[0, 77] + lambda_2[0, 82] - 500*lambda_2[0, 91] + 500*lambda_2[0, 94] + 10000*lambda_2[0, 97] + 10000*lambda_2[0, 99] + 150000*lambda_2[0, 103] + 10000*lambda_2[0, 105] + 150000*lambda_2[0, 106] + 10000*lambda_2[0, 107] - 150000*lambda_2[0, 112] + 100*lambda_2[0, 134] - 100*lambda_2[0, 136] + 100*lambda_2[0, 139] - 100*lambda_2[0, 141] - 10000*lambda_2[0, 143] - 50000*lambda_2[0, 146] + 50000*lambda_2[0, 148] + 50000*lambda_2[0, 151] - 10000*lambda_2[0, 152] - 50000*lambda_2[0, 153] - 100*lambda_2[0, 161] + 100*lambda_2[0, 163] - 10000*lambda_2[0, 173] - 10000*lambda_2[0, 175] + 50000*lambda_2[0, 179] - 50000*lambda_2[0, 181] - 10000*lambda_2[0, 184] - 50000*lambda_2[0, 185] + 50000*lambda_2[0, 187] - 10000*lambda_2[0, 189] + 10000*lambda_2[0, 191] + 10000*lambda_2[0, 193] + 10000*lambda_2[0, 200] + 10000*lambda_2[0, 202] - 10000*lambda_2[0, 207] == g*B[0, 9] - l*B[0, 8] + B[0, 13]*t[0, 0]]
	# constraints += [lambda_2[0, 13] + lambda_2[0, 15] - 500*lambda_2[0, 17] + 500*lambda_2[0, 19] + 150000*lambda_2[0, 21] + 150000*lambda_2[0, 23] - lambda_2[0, 49] - lambda_2[0, 52] - 100*lambda_2[0, 55] + 100*lambda_2[0, 57] + 500*lambda_2[0, 61] - 100*lambda_2[0, 63] - 500*lambda_2[0, 64] + 100*lambda_2[0, 65] + 50000*lambda_2[0, 67] - 50000*lambda_2[0, 69] - 150000*lambda_2[0, 73] - 50000*lambda_2[0, 75] - 150000*lambda_2[0, 76] + 50000*lambda_2[0, 77] + lambda_2[0, 82] - 500*lambda_2[0, 91] + 500*lambda_2[0, 94] + 10000*lambda_2[0, 97] + 10000*lambda_2[0, 99] + 150000*lambda_2[0, 103] + 10000*lambda_2[0, 105] + 150000*lambda_2[0, 106] + 10000*lambda_2[0, 107] - 150000*lambda_2[0, 112] + 100*lambda_2[0, 134] - 100*lambda_2[0, 136] + 100*lambda_2[0, 139] - 100*lambda_2[0, 141] - 10000*lambda_2[0, 143] - 50000*lambda_2[0, 146] + 50000*lambda_2[0, 148] + 50000*lambda_2[0, 151] - 10000*lambda_2[0, 152] - 50000*lambda_2[0, 153] - 100*lambda_2[0, 161] + 100*lambda_2[0, 163] - 10000*lambda_2[0, 173] - 10000*lambda_2[0, 175] + 50000*lambda_2[0, 179] - 50000*lambda_2[0, 181] - 10000*lambda_2[0, 184] - 50000*lambda_2[0, 185] + 50000*lambda_2[0, 187] - 10000*lambda_2[0, 189] + 10000*lambda_2[0, 191] + 10000*lambda_2[0, 193] + 10000*lambda_2[0, 200] + 10000*lambda_2[0, 202] - 10000*lambda_2[0, 207] >= g*B[0, 9] - l*B[0, 8] + B[0, 13]*t[0, 0]- objc]
	constraints += [lambda_2[0, 55] - lambda_2[0, 57] + lambda_2[0, 63] - lambda_2[0, 65] - 500*lambda_2[0, 67] + 500*lambda_2[0, 69] + 500*lambda_2[0, 75] - 500*lambda_2[0, 77] - 200*lambda_2[0, 97] - 200*lambda_2[0, 99] - 200*lambda_2[0, 105] - 200*lambda_2[0, 107] - lambda_2[0, 134] + lambda_2[0, 136] - lambda_2[0, 139] + lambda_2[0, 141] + 200*lambda_2[0, 143] + 500*lambda_2[0, 146] - 500*lambda_2[0, 148] - 500*lambda_2[0, 151] + 200*lambda_2[0, 152] + 500*lambda_2[0, 153] + lambda_2[0, 161] - lambda_2[0, 163] + 200*lambda_2[0, 173] + 200*lambda_2[0, 175] - 500*lambda_2[0, 179] + 500*lambda_2[0, 181] + 200*lambda_2[0, 184] + 500*lambda_2[0, 185] - 500*lambda_2[0, 187] + 200*lambda_2[0, 189] - 200*lambda_2[0, 191] - 200*lambda_2[0, 193] - 200*lambda_2[0, 200] - 200*lambda_2[0, 202] + 200*lambda_2[0, 207] <= 2*g*B[0, 10]+ objc]
	constraints += [lambda_2[0, 55] - lambda_2[0, 57] + lambda_2[0, 63] - lambda_2[0, 65] - 500*lambda_2[0, 67] + 500*lambda_2[0, 69] + 500*lambda_2[0, 75] - 500*lambda_2[0, 77] - 200*lambda_2[0, 97] - 200*lambda_2[0, 99] - 200*lambda_2[0, 105] - 200*lambda_2[0, 107] - lambda_2[0, 134] + lambda_2[0, 136] - lambda_2[0, 139] + lambda_2[0, 141] + 200*lambda_2[0, 143] + 500*lambda_2[0, 146] - 500*lambda_2[0, 148] - 500*lambda_2[0, 151] + 200*lambda_2[0, 152] + 500*lambda_2[0, 153] + lambda_2[0, 161] - lambda_2[0, 163] + 200*lambda_2[0, 173] + 200*lambda_2[0, 175] - 500*lambda_2[0, 179] + 500*lambda_2[0, 181] + 200*lambda_2[0, 184] + 500*lambda_2[0, 185] - 500*lambda_2[0, 187] + 200*lambda_2[0, 189] - 200*lambda_2[0, 191] - 200*lambda_2[0, 193] - 200*lambda_2[0, 200] - 200*lambda_2[0, 202] + 200*lambda_2[0, 207] >= 2*g*B[0, 10]- objc]
	constraints += [lambda_2[0, 97] + lambda_2[0, 99] + lambda_2[0, 105] + lambda_2[0, 107] - lambda_2[0, 143] - lambda_2[0, 152] - lambda_2[0, 173] - lambda_2[0, 175] - lambda_2[0, 184] - lambda_2[0, 189] + lambda_2[0, 191] + lambda_2[0, 193] + lambda_2[0, 200] + lambda_2[0, 202] - lambda_2[0, 207] == 3*g*B[0, 12]]
	# constraints += [lambda_2[0, 97] + lambda_2[0, 99] + lambda_2[0, 105] + lambda_2[0, 107] - lambda_2[0, 143] - lambda_2[0, 152] - lambda_2[0, 173] - lambda_2[0, 175] - lambda_2[0, 184] - lambda_2[0, 189] + lambda_2[0, 191] + lambda_2[0, 193] + lambda_2[0, 200] + lambda_2[0, 202] - lambda_2[0, 207] >= 3*g*B[0, 12]- objc]
	constraints += [lambda_2[0, 17] - lambda_2[0, 19] - 600*lambda_2[0, 21] - 600*lambda_2[0, 23] - lambda_2[0, 61] + lambda_2[0, 64] - 100*lambda_2[0, 67] + 100*lambda_2[0, 69] + 600*lambda_2[0, 73] + 100*lambda_2[0, 75] + 600*lambda_2[0, 76] - 100*lambda_2[0, 77] + lambda_2[0, 91] - lambda_2[0, 94] - 600*lambda_2[0, 103] - 600*lambda_2[0, 106] + 600*lambda_2[0, 112] + 100*lambda_2[0, 146] - 100*lambda_2[0, 148] - 100*lambda_2[0, 151] + 100*lambda_2[0, 153] - 100*lambda_2[0, 179] + 100*lambda_2[0, 181] + 100*lambda_2[0, 185] - 100*lambda_2[0, 187] == g*B[0, 11]]
	# constraints += [lambda_2[0, 17] - lambda_2[0, 19] - 600*lambda_2[0, 21] - 600*lambda_2[0, 23] - lambda_2[0, 61] + lambda_2[0, 64] - 100*lambda_2[0, 67] + 100*lambda_2[0, 69] + 600*lambda_2[0, 73] + 100*lambda_2[0, 75] + 600*lambda_2[0, 76] - 100*lambda_2[0, 77] + lambda_2[0, 91] - lambda_2[0, 94] - 600*lambda_2[0, 103] - 600*lambda_2[0, 106] + 600*lambda_2[0, 112] + 100*lambda_2[0, 146] - 100*lambda_2[0, 148] - 100*lambda_2[0, 151] + 100*lambda_2[0, 153] - 100*lambda_2[0, 179] + 100*lambda_2[0, 181] + 100*lambda_2[0, 185] - 100*lambda_2[0, 187] >= g*B[0, 11]- objc]
	constraints += [lambda_2[0, 67] - lambda_2[0, 69] - lambda_2[0, 75] + lambda_2[0, 77] - lambda_2[0, 146] + lambda_2[0, 148] + lambda_2[0, 151] - lambda_2[0, 153] + lambda_2[0, 179] - lambda_2[0, 181] - lambda_2[0, 185] + lambda_2[0, 187] <= 2*g*B[0, 14]+ objc]
	constraints += [lambda_2[0, 67] - lambda_2[0, 69] - lambda_2[0, 75] + lambda_2[0, 77] - lambda_2[0, 146] + lambda_2[0, 148] + lambda_2[0, 151] - lambda_2[0, 153] + lambda_2[0, 179] - lambda_2[0, 181] - lambda_2[0, 185] + lambda_2[0, 187] >= 2*g*B[0, 14]- objc]
	constraints += [lambda_2[0, 21] + lambda_2[0, 23] - lambda_2[0, 73] - lambda_2[0, 76] + lambda_2[0, 103] + lambda_2[0, 106] - lambda_2[0, 112] == g*B[0, 13]]
	# constraints += [lambda_2[0, 21] + lambda_2[0, 23] - lambda_2[0, 73] - lambda_2[0, 76] + lambda_2[0, 103] + lambda_2[0, 106] - lambda_2[0, 112] >= g*B[0, 13]- objc]


	#------------------The Unsafe conditions------------------
	constraints += [-5.56*lambda_3[0, 0] + 6.56*lambda_3[0, 1] + 30.9136*lambda_3[0, 2] + 43.0336*lambda_3[0, 3] - 36.4736*lambda_3[0, 4] <= -B[0, 0]+ objc]
	constraints += [-5.56*lambda_3[0, 0] + 6.56*lambda_3[0, 1] + 30.9136*lambda_3[0, 2] + 43.0336*lambda_3[0, 3] - 36.4736*lambda_3[0, 4] >= -B[0, 0]- objc]
	constraints += [-8*lambda_3[0, 0] + 8*lambda_3[0, 1] + 88.96*lambda_3[0, 2] + 104.96*lambda_3[0, 3] - 96.96*lambda_3[0, 4] <= -B[0, 1]+ objc]
	constraints += [-8*lambda_3[0, 0] + 8*lambda_3[0, 1] + 88.96*lambda_3[0, 2] + 104.96*lambda_3[0, 3] - 96.96*lambda_3[0, 4] >= -B[0, 1]- objc]
	constraints += [-4*lambda_3[0, 0] + 4*lambda_3[0, 1] + 108.48*lambda_3[0, 2] + 116.48*lambda_3[0, 3] - 112.48*lambda_3[0, 4] <= -B[0, 3] - 0.01+ objc]
	constraints += [-4*lambda_3[0, 0] + 4*lambda_3[0, 1] + 108.48*lambda_3[0, 2] + 116.48*lambda_3[0, 3] - 112.48*lambda_3[0, 4] >= -B[0, 3] - 0.01- objc]
	constraints += [64*lambda_3[0, 2] + 64*lambda_3[0, 3] - 64*lambda_3[0, 4] == -B[0, 5]]
	# constraints += [64*lambda_3[0, 2] + 64*lambda_3[0, 3] - 64*lambda_3[0, 4] >= -B[0, 5]- objc]
	constraints += [16*lambda_3[0, 2] + 16*lambda_3[0, 3] - 16*lambda_3[0, 4] <= -B[0, 7]+ objc]
	constraints += [16*lambda_3[0, 2] + 16*lambda_3[0, 3] - 16*lambda_3[0, 4] >= -B[0, 7]- objc]
	constraints += [-6.4*lambda_3[0, 0] + 6.4*lambda_3[0, 1] + 71.168*lambda_3[0, 2] + 83.968*lambda_3[0, 3] - 77.568*lambda_3[0, 4] <= -B[0, 2]+ objc]
	constraints += [-6.4*lambda_3[0, 0] + 6.4*lambda_3[0, 1] + 71.168*lambda_3[0, 2] + 83.968*lambda_3[0, 3] - 77.568*lambda_3[0, 4] >= -B[0, 2]- objc]
	constraints += [102.4*lambda_3[0, 2] + 102.4*lambda_3[0, 3] - 102.4*lambda_3[0, 4] == -B[0, 9]]
	# constraints += [102.4*lambda_3[0, 2] + 102.4*lambda_3[0, 3] - 102.4*lambda_3[0, 4] >= -B[0, 9]- objc]
	constraints += [51.2*lambda_3[0, 2] + 51.2*lambda_3[0, 3] - 51.2*lambda_3[0, 4] <= -B[0, 10]+ objc]
	constraints += [51.2*lambda_3[0, 2] + 51.2*lambda_3[0, 3] - 51.2*lambda_3[0, 4] >= -B[0, 10]- objc]
	constraints += [-4*lambda_3[0, 0] + 4*lambda_3[0, 1] + 85.44*lambda_3[0, 2] + 93.44*lambda_3[0, 3] - 89.44*lambda_3[0, 4] <= -B[0, 4] - 0.01+ objc]
	constraints += [-4*lambda_3[0, 0] + 4*lambda_3[0, 1] + 85.44*lambda_3[0, 2] + 93.44*lambda_3[0, 3] - 89.44*lambda_3[0, 4] >= -B[0, 4] - 0.01- objc]
	constraints += [64*lambda_3[0, 2] + 64*lambda_3[0, 3] - 64*lambda_3[0, 4] == -B[0, 11]]
	# constraints += [64*lambda_3[0, 2] + 64*lambda_3[0, 3] - 64*lambda_3[0, 4] >= -B[0, 11]- objc]
	constraints += [32*lambda_3[0, 2] + 32*lambda_3[0, 3] - 32*lambda_3[0, 4] <= -B[0, 14]+ objc]
	constraints += [32*lambda_3[0, 2] + 32*lambda_3[0, 3] - 32*lambda_3[0, 4] >= -B[0, 14]- objc]
	constraints += [51.2*lambda_3[0, 2] + 51.2*lambda_3[0, 3] - 51.2*lambda_3[0, 4] <= -B[0, 6]+ objc]
	constraints += [51.2*lambda_3[0, 2] + 51.2*lambda_3[0, 3] - 51.2*lambda_3[0, 4] >= -B[0, 6]- objc]
	constraints += [16*lambda_3[0, 2] + 16*lambda_3[0, 3] - 16*lambda_3[0, 4] <= -B[0, 8]+ objc]
	constraints += [16*lambda_3[0, 2] + 16*lambda_3[0, 3] - 16*lambda_3[0, 4] >= -B[0, 8]- objc]

	# constraints += [B <= 1]
	# constraints += [B >= -1]
	constraints += [B[0,5] == 0]
	constraints += [B[0,9] == 0]
	constraints += [B[0,11] == 0]
	constraints += [B[0,12] == 0]
	constraints += [B[0,13] == 0]


	

	problem = cp.Problem(objective, constraints)
	assert problem.is_dcp()
	assert problem.is_dpp()
	# print("form the problem")
	control_param = np.reshape(control_param, (1, 2))
	theta_t = torch.from_numpy(control_param).float()
	theta_t.requires_grad = True
	layer = CvxpyLayer(problem, parameters=[t], variables=[lambda_1, lambda_2, lambda_3, B, objc])
	lambda_1_star, lambda_2_star, lambda_3_star, B_star, objc_star = layer(theta_t)
	# print("solve the problem")
	objc_star.backward()
	# B = B_star.detach().numpy()[0]
	# initTest, unsafeTest, lieTest, init, unsafe, lie = BarrierTest(B, control_param[0], l, k, g)

	Barrier_param = B_star.detach().numpy()[0]
	# print("stop here")
	initTest, init = initValidTest(Barrier_param)
	# print("stop here 1")
	unsafeTest, unsafe = unsafeValidTest(Barrier_param)
	# print("stop here 2")
	lieTest, lie = lieValidTest(Barrier_param, l, control_param, f, g)
	# print("stop here 3")

	print(initTest, init, unsafeTest, unsafe, lieTest, lie)
	
	# return Barrier_param, theta_t.grad.detach().numpy()[0], objc_star.detach().numpy(), initTest, unsafeTest, lieTest, init, unsafe, lie
	return Barrier_param, theta_t.grad.detach().numpy()[0], objc_star.detach().numpy(), initTest, unsafeTest, lieTest


def initValidTest(Barrier_param):
	Test = True
	init = 0
	assert Barrier_param.shape == (15, )
	for _ in range(10000):
		x1 = np.random.uniform(low=1, high=2, size=1)[0]
		x2 = np.random.uniform(low=-0.5, high=0.5, size=1)[0]
		while (x1 - 1.5)**2 + x2**2 - 0.25 > 0:
			x1 = np.random.uniform(low=1, high=2, size=1)[0]
			x2 = np.random.uniform(low=-0.5, high=0.5, size=1)[0]
		barrier = Barrier_param.dot(np.array([1, x2, x1, x2**2, x1**2, x2**3, x1**3, x2**4, x1**4, x1*x2, x1*x2**2, x1**2*x2, x1*x2**3, x1**3*x2, x1**2*x2**2]))
		if barrier < 0:
			Test = False
			init += 1
	return Test, init


def unsafeValidTest(Barrier_param):
	Test = True
	unsafe = 0
	assert Barrier_param.shape == (15, )
	for _ in range(10000):
		x1 = np.random.uniform(low=-0.3, high=-1.3, size=1)[0]
		x2 = np.random.uniform(low=-0.5, high=-1.5, size=1)[0]
		while (x1 + 0.8)**2 + (x2 + 1)**2 - 0.25 > 0:
			x1 = np.random.uniform(low=-0.3, high=-1.3, size=1)[0]
			x2 = np.random.uniform(low=-0.5, high=-1.5, size=1)[0]
		barrier = Barrier_param.dot(np.array([1, x2, x1, x2**2, x1**2, x2**3, x1**3, x2**4, x1**4, x1*x2, x1*x2**2, x1**2*x2, x1*x2**3, x1**3*x2, x1**2*x2**2]))
		if barrier > 0:
			Test = False
			unsafe += 1
	return Test, unsafe


def lieValidTest(B, l, t, f, g):
	Test = True
	L = 0
	for i in range(10000):
		x1 = np.random.uniform(low=-100, high=100, size=1)[0]
		x2 = np.random.uniform(low=-100, high=100, size=1)[0]
		t = np.reshape(t, (1, 2))
		B = np.reshape(B, (1, 15))
		barrier = 4*f*x1**3*x2*B[0, 8] + 3*f*x1**2*x2**2*B[0, 13] + 3*f*x1**2*x2*B[0, 6] + 2*f*x1*x2**3*B[0, 14] + 2*f*x1*x2**2*B[0, 11] + 2*f*x1*x2*B[0, 4] + f*x2**4*B[0, 12] + f*x2**3*B[0, 10] + f*x2**2*B[0, 9] + f*x2*B[0, 2] + g*x1**6*B[0, 13] + 2*g*x1**5*x2*B[0, 14] + g*x1**5*B[0, 11] + 3*g*x1**4*x2**2*B[0, 12] + 2*g*x1**4*x2*B[0, 10] + g*x1**4*B[0, 9] + 4*g*x1**3*x2**3*B[0, 7] + 3*g*x1**3*x2**2*B[0, 5] + 2*g*x1**3*x2*B[0, 3] + g*x1**3*B[0, 1] - l*x1**4*B[0, 8] - l*x1**3*x2*B[0, 13] - l*x1**3*B[0, 6] - l*x1**2*x2**2*B[0, 14] - l*x1**2*x2*B[0, 11] - l*x1**2*B[0, 4] - l*x1*x2**3*B[0, 12] - l*x1*x2**2*B[0, 10] - l*x1*x2*B[0, 9] - l*x1*B[0, 2] - l*x2**4*B[0, 7] - l*x2**3*B[0, 5] - l*x2**2*B[0, 3] - l*x2*B[0, 1] - l*B[0, 0] + x1**4*B[0, 13]*t[0, 0] + x1**3*x2*B[0, 13]*t[0, 1] + 2*x1**3*x2*B[0, 14]*t[0, 0] + x1**3*B[0, 11]*t[0, 0] + 3*x1**2*x2**2*B[0, 12]*t[0, 0] + 2*x1**2*x2**2*B[0, 14]*t[0, 1] + 2*x1**2*x2*B[0, 10]*t[0, 0] + x1**2*x2*B[0, 11]*t[0, 1] + x1**2*B[0, 9]*t[0, 0] + 4*x1*x2**3*B[0, 7]*t[0, 0] + 3*x1*x2**3*B[0, 12]*t[0, 1] + 3*x1*x2**2*B[0, 5]*t[0, 0] + 2*x1*x2**2*B[0, 10]*t[0, 1] + 2*x1*x2*B[0, 3]*t[0, 0] + x1*x2*B[0, 9]*t[0, 1] + x1*B[0, 1]*t[0, 0] + 4*x2**4*B[0, 7]*t[0, 1] + 3*x2**3*B[0, 5]*t[0, 1] + 2*x2**2*B[0, 3]*t[0, 1] + x2*B[0, 1]*t[0, 1]
		if barrier < 0:
			Test = False
			L += 1
	return Test, L


def safeChecker(state, control_param, f_low, f_high, g_low, g_high, deltaT):
	x, y = state[0], state[1]
	# must not in the X_u set
	assert (x + 0.8)**2 + (y + 1)**2 - 0.25 > 0
	# feedback control on the u 
	u = control_param.dot(state)
	# don't quite understand how safty checker works here, what are the low and high values here for 
	x_dot_low = deltaT*y*f_low
	x_dot_high = deltaT*y*f_high
	x_new = min(abs(x + x_dot_low + 0.8), abs(x + x_dot_high + 0.8))

	y_dot_low = deltaT*(x**3*g_low/3 + u)
	y_dot_high = deltaT*(x**3*g_high/3 + u)
	y_new = min(abs(y + y_dot_low + 1), abs(y + y_dot_high + 1))
	stop = False
	if x_new**2 + y_new**2 <= 0.25:
		stop = True
		print('safety checker acts here')
	return stop


def SVG(control_param, f, g, weight=0):
	global UNSAFE, STEPS, SAFETYChecker 
	env = PJ()
	state_tra = []
	control_tra = []
	reward_tra = []
	distance_tra = []
	unsafedis_tra = []
	state, done = env.reset(), False

	ep_r = 0
	while not done:
		if env.distance >= 50:
			break
		if (state[0] + 0.8)**2 + (state[1] + 1)**2 - 0.25 <= 0:
			UNSAFE += 1
		if safeChecker(state, control_param, f_low=-1.5, f_high=1.5, g_low=-1.5, g_high=1.5, deltaT=env.deltaT):
			SAFETYChecker += 1
			break
		control_input = control_param.dot(state)
		state_tra.append(state)
		control_tra.append(control_input)
		distance_tra.append(env.distance)
		unsafedis_tra.append(env.unsafedis)
		next_state, reward, done = env.step(control_input)
		reward_tra.append(reward)
		ep_r += reward + 2
		state = next_state
		STEPS += 1
	EPR.append(ep_r)

	vs_prime = np.array([0, 0])
	vtheta_prime = np.array([0, 0])
	gamma = 0.99
	for i in range(len(state_tra)-1, -1, -1):
		ra = np.array([0, 0])
		assert distance_tra[i] >= 0
		rs = np.array([-(state_tra[i][0]) / distance_tra[i] + weight * (state_tra[i][0] + 0.8) / unsafedis_tra[i], 
			-(state_tra[i][1]) / distance_tra[i] + weight * (state_tra[i][1] + 1) / unsafedis_tra[i]])
		pis = np.vstack((np.array([0, 0]), control_param))
		fs = np.array([[1, f*env.deltaT], [g*state_tra[i][0]**2, 0]])
		fa = np.array([[0, 0], [0, env.deltaT]])
		vs = rs + ra.dot(pis) + gamma * vs_prime.dot(fs + fa.dot(pis))


		pitheta = np.array([[0, 0],[state_tra[i][0], state_tra[i][1]]])
		vtheta = ra.dot(pitheta) + gamma * vs_prime.dot(fa).dot(pitheta) + gamma * vtheta_prime
		vs_prime = vs
		vtheta_prime = vtheta
		if i >= 1:
			estimatef = (state_tra[i][0] - state_tra[i-1][0]) / (env.deltaT*state_tra[i-1][1])
			f += 0.1*(estimatef - f)
			estimateg = 3 * ((state_tra[i][1] - state_tra[i-1][1]) / env.deltaT - control_tra[i-1]) / (state_tra[i-1][0]**3)
			g += 0.1*(estimateg - g)
	return vtheta, state, f, g



def plot(control_param, Barrier_param, figname, N=5, Barrier=True):
	# SVG only unsafe case: control_param = np.array([-1.43173926 -0.29498508])
	# SVG only safe but fail to generate a certificate: 
	# control_param = np.array([-3.01809506, -2.09058536]) 
	# Barrier_param = np.array([0.1885918,   0.31503662,  0.21694702, -0.07325687,  0.00999565, -0.04210743])
	env = PJ()
	trajectory = []
	BarrierValue = []

	for i in range(N):
		state = env.reset()
		for _ in range(env.max_iteration):
			control_input = control_param.dot(state)
			trajectory.append(state)
			state, _, _ = env.step(control_input)
			x1 = state[0]
			x2 = state[1]
			barrier = Barrier_param.dot(
				np.array([1, x2, x1, x2**2, x1**2, x1*x2]))
			if i == 0:
				BarrierValue.append(barrier)
	# plt.figure(0)
	# plt.plot(BarrierValue, label='Barrier Value along the Trajectory')
	# plt.savefig('Bar_Tra.png')
			
	plt.figure(0, figsize=(7,4))
	if Barrier:	
		x1 = np.linspace(-3, 3, 50)
		x2 = np.linspace(-3, 3, 50)
		x1,x2 = np.meshgrid(x1, x2)
		z = Barrier_param.dot(np.array([1, x2, x1, x2**2, x1**2, x1*x2], dtype=object))
		levels = np.array([0])
		cs = plt.contour(x1, x2, z, levels)

	circle1 = plt.Circle((1.5, 0), 0.5)
	circle2 = plt.Circle((-0.8, -1), 0.5, color='r')
	plt.gca().add_patch(circle1)
	plt.gca().add_patch(circle2)

	trajectory = np.array(trajectory)
	for i in range(N):
		if Barrier:
			plt.plot(trajectory[i*env.max_iteration:(i+1)*env.max_iteration, 0], trajectory[i*env.max_iteration:(i+1)*env.max_iteration, 1], color='#2ca02c')
		else:
			plt.plot(trajectory[i*env.max_iteration:(i+1)*env.max_iteration, 0], trajectory[i*env.max_iteration:(i+1)*env.max_iteration, 1], color='#ff7f0e')
	plt.grid(True)
	plt.legend(handles=[SVG_patch, Ours_patch])
	plt.savefig(figname, bbox_inches='tight')


def BarrierConsGenerate():
	### X0
	def generateConstraints(exp1, exp2, file, degree):
		for i in range(degree+1):
			for j in range(degree+1):
				if i + j <= degree:
					if exp1.coeff(x1, i).coeff(x2, j) != 0:
							if exp2.coeff(x1, i).coeff(x2, j) != 0:
								file.write('constraints += [' + str(exp1.coeff(x1, i).coeff(x2, j)) + ' <= ' + str(exp2.coeff(x1, i).coeff(x2, j)) + '+ objc' + ']\n')
								file.write('constraints += [' + str(exp1.coeff(x1, i).coeff(x2, j)) + ' >= ' + str(exp2.coeff(x1, i).coeff(x2, j)) + '- objc' + ']\n')
							else:
								file.write('constraints += [' + str(exp1.coeff(x1, i).coeff(x2, j)) + ' == ' + str(exp2.coeff(x1, i).coeff(x2, j)) + ']\n')
									

	
	x1, x2, l = symbols('x1, x2, l')
	f, g = symbols('f, g')
	X = [x1, x2]
	
	initial_set = [4*((x1-1.5)**2+x2**2), 1-4*((x1-1.5)**2+x2**2)]
	# print("setting up")
	# Generate the possible handelman product to the power defined
	init_poly_list = Matrix(possible_handelman_generation(2, initial_set))
	# print("generating poly_list")
	# incorporate the interval with handelman basis
	monomial = monomial_generation(4, X)
	# monomial.remove(1)
	monomial_list = Matrix(monomial)
	# print("generating monomial terms")
	# print(monomial_list)
	B = MatrixSymbol('B', 1, len(monomial_list))
	lambda_poly_init = MatrixSymbol('lambda_1', 1, len(init_poly_list))
	print("the length of the lambda_1 is", len(init_poly_list))
	lhs_init = B * monomial_list
	# lhs_init = V * monomial_list
	lhs_init = lhs_init[0, 0].expand()
	# print("Get done the left hand side mul")
	
	rhs_init = lambda_poly_init * init_poly_list
	# print("Get done the right hand side mul")
	rhs_init = rhs_init[0, 0].expand()
	file = open("barrier_deg4.txt","w")
	file.write("#-------------------The Initial Set Conditions-------------------\n")
	generateConstraints(rhs_init, lhs_init, file, 4)
		# f.close()
	# theta = MatrixSymbol('theta',1 ,2)
	u0Base = Matrix([[x1, x2]])
	t0 = MatrixSymbol('t', 1, 2)
	a_e = t0*u0Base.T
	a_e = expand(a_e[0, 0])

	
	dynamics = [f*x2, g*x1**3+a_e]
	monomial_der = GetDerivative(dynamics, monomial, X)

	lhs_der = B * monomial_der - l*B*monomial_list - 0.5*Matrix([(x1**2 + x2**2)]) 
	lhs_der = lhs_der[0,0].expand()

	# lie_poly_list = [1/9*(y**2+v_y**2+phi_e**2+r**2), 1-1/9*(y**2+v_y**2+phi_e**2+r**2)]
	lie_poly_list = [100-x1, 100-x2, x1-100, x2-100]
	lie_poly = Matrix(possible_handelman_generation(6, lie_poly_list))
	lambda_poly_der = MatrixSymbol('lambda_2', 1, len(lie_poly))
	print("the length of the lambda_2 is", len(lie_poly))
	rhs_der = lambda_poly_der * lie_poly
	rhs_der = rhs_der[0,0].expand()

	# with open('cons.txt', 'a+') as f:
	file.write("\n")
	file.write("#------------------The Lie Derivative conditions------------------\n")
	generateConstraints(rhs_der, lhs_der, file, 6)
	file.write("\n")

	unsafe_poly_list = [4*((x1+0.8)**2+(x2+1)**2), 1-4*((x1+0.8)**2+(x2+1)**2)]
	unsafe_poly = Matrix(possible_handelman_generation(2, unsafe_poly_list))
	lambda_poly_unsafe = MatrixSymbol('lambda_3', 1, len(unsafe_poly))
	print("the length of the lambda_3 is", len(unsafe_poly))

	rhs_unsafe = lambda_poly_unsafe * unsafe_poly
	rhs_unsafe = rhs_unsafe[0,0].expand()

	lhs_unsafe = -B*monomial_list - 0.01*Matrix([x1**2 + x2**2])
	# lhs_unsafe = -B * monomial_list
	lhs_unsafe = lhs_unsafe[0,0].expand()

	file.write("\n")
	file.write("#------------------The Unsafe conditions------------------\n")
	generateConstraints(rhs_unsafe, lhs_unsafe, file, 4)
	file.write("\n")


	file.write("#------------------Monomial and Polynomial Terms------------------\n")
	file.write("polynomial terms:"+str(monomial)+"\n")
	file.write("number of polynomial terms:"+str(len(monomial_list))+"\n")
	file.write("the length of the lambda_1 is "+str(len(init_poly_list))+"\n")
	file.write("the length of the lambda_2 is "+str(len(lie_poly))+"\n")
	file.write("the length of the lambda_3 is "+str(len(unsafe_poly))+"\n")
	# file.write(str(len(monomial))+"\n")
	file.write("\n")
	file.write("#------------------Lie Derivative test------------------\n")
	temp1 = B*monomial_der
	temp2 = l*B*monomial_list
	file.write(str(expand(temp1[0, 0])-expand(temp2[0, 0]))+"\n")
	file.close()


if __name__ == '__main__':

	def baselineSVG():
		l = -2
		f = np.random.uniform(low=-1.5, high=1.5)
		g = np.random.uniform(low=-1.5, high=1.5)
		weight = np.linspace(0, 0.8, 100)
		global UNSAFE, STEPS, SAFETYChecker
		UNSAFE, STEPS, SAFETYChecker = 0, 0, 0

		control_param = np.array([0.0, 0.0])
		for i in range(100):
			theta_gard = np.array([0, 0])
			vtheta, final_state, f, g = SVG(control_param, f, g, weight[i])
			control_param += 1e-5 * np.clip(vtheta, -2e5, 2e5)
			if i % 1 == 0:
				print(i, control_param, vtheta, theta_gard)
		try:
			Barrier_param, theta_gard, slack_star, initTest, unsafeTest, lieTest = senGradSDP(control_param, l, f, g)
			if initTest and unsafeTest and lieTest and abs(final_state[0])<5e-4 and abs(final_state[1])<5e-4:
				print('Successfully learn a controller with its barrier certificate.')
				print('The controller is: ', control_param,'The barrier is: ',  Barrier_param)
			else:
				if i == 99:
					print('unvalid barrier certificate or controller does not satisfy the learning goal')
			plot(control_param, Barrier_param, figname='Tra_Barrier_Contour_SVGOnly.pdf', Barrier=False)	
		except:
			print('SOS failed')
		# np.save('./data/PJ/svg1.npy', np.array(EPR))	
	
	### model-based RL with barrier certificate
	def Ours_LP():
		l = -10
		f = np.random.uniform(low=-1.5, high=1.5)
		g = np.random.uniform(low=-1.5, high=1.5)
		global UNSAFE, STEPS, SAFETYChecker
		UNSAFE, STEPS, SAFETYChecker = 0, 0, 0

		control_param = np.array([0.0, 0.0])
		for i in range(100):
			theta_gard = np.array([0, 0])
			vtheta, final_state, f, g = SVG(control_param, f, g)
			try:
				Barrier_param, theta_gard, slack_star, initTest, unsafeTest, lieTest = senGradLP(control_param, l, f, g)
				print("the barrier paramters are: ", Barrier_param)
				# Lya_param, PosTest, LieTest = senGradLyapunov(control_param)
			except:
				print('SOS failed')
			if initTest and unsafeTest and lieTest:
				print('Successfully learn a controller with its barrier certificate.')
				print('The controller is: ', control_param,'The barrier is: ',  Barrier_param)
				file = open('./result_safechecker.txt', 'a')
				file.write(str(STEPS)+ ' ' + str(UNSAFE) + ' ' + str(SAFETYChecker) +'\n')
				file.close()
				break
			control_param += 1e-3 * np.clip(vtheta, -1e3, 1e3)
			control_param -= np.clip(theta_gard, -1, 1)
			if i % 1 == 0:
				print(i, control_param, vtheta, theta_gard, slack_star)
		plot(control_param, Barrier_param, figname='Tra_Barrier_Contour.pdf')

	# def Ours():
	# 	# l = -2
	# 	f = np.random.uniform(low=-1.5, high=1.5)
	# 	g = np.random.uniform(low=-1.5, high=1.5)
	# 	global UNSAFE, STEPS, SAFETYChecker
	# 	UNSAFE, STEPS, SAFETYChecker = 0, 0, 0

	# 	control_param = np.array([0.0, 0.0])
	# 	for i in range(100):
	# 		theta_gard = np.array([0, 0])
	# 		BarGrad = np.array([0, 0])
	# 		Bslack = 100
	# 		vtheta, final_state, f, g = SVG(control_param, f, g)
	# 		try: 
	# 			B, BarGrad, Bslack, initTest, unsafeTest, BlieTest, init, unsafe, lie = senGradLP(control_param, l=-2, f=f, g=g)
	# 			print("The iteration number: ", i)
	# 			print("initTest: ", initTest, init, "unsafeTest: ", unsafeTest, unsafe, "BlieTest: ", BlieTest, lie)
	# 			print("The Barrier gradient is: ", BarGrad, "The Barrier slack variable is: ", Bslack)
	# 			print("THe barrier funtion is:", B)
	# 			# V, LyaGrad, Vslack, stateTest,  VlieTest = LyaLP(control_param, f, g)
	# 			# print(initTest, unsafeTest, BlieTest, stateTest,  VlieTest)
	# 			# print("Lya_iniTest: ", stateTest, "LieTest: ", VlieTest)
	# 			# print("The Lyapunov gradient is: ", LyaGrad, "The Lyapunov slack variable is: ", Vslack)
	# 			# print("The Lyapunov funtion is:", V)
	# 			print("The vtheta is:", vtheta[0])
	# 			print("The control parameter is: ", control_param)
	# 			print("The final state is: ", final_state)
	# 			print("============================================\n")
	# 			print("\n")
	# 			if initTest and unsafeTest and BlieTest and LA.norm(final_state) <= 0.01:
	# 				print('Successfully learn a controller with its barrier certificate and Lyapunov function')
	# 				print('Controller: ', control_param)
	# 				print('Valid Barrier is: ', B)
	# 				# print('Valid Lyapunov is: ', V) 
	# 				plot(control_param, B, figname='Tra_Barrier_Contour.pdf')
	# 				break
	# 		except Exception as e:
	# 			print(e)
	# 		control_param += 1e-5 * np.clip(vtheta, -2e2, 2e2)
	# 		control_param -= 0.1 * np.clip(BarGrad, -1, 1)
			# if i % 1 == 0:
			# 	print(i, control_param, vtheta, theta_gard, slack_star)
		
		# np.save('./data/PJ/ours1.npy', np.array(EPR))
	
	# print('baseline starts here')
	# baselineSVG()
	# print('')
	# print('Our approach starts here')
	Ours_LP()
	# BarrierConsGenerate()








